import{_ as p,c as k,a2 as o,b as r,w as i,a3 as l,j as a,a as e,B as d,o as t,G as h}from"./chunks/framework.BkvI1e0W.js";const f=JSON.parse('{"title":"Orchestrator Internals","description":"","frontmatter":{"title":"Orchestrator Internals","editLink":true},"headers":[],"relativePath":"advanced/orchestrator-internals/index.md","filePath":"advanced/orchestrator-internals/index.md","lastUpdated":1761471006000}'),c={name:"advanced/orchestrator-internals/index.md"};function g(E,s,u,y,m,A){const n=d("Mermaid");return t(),k("div",null,[s[3]||(s[3]=o('<h1 id="orchestrator-internals" tabindex="-1">Orchestrator Internals <a class="header-anchor" href="#orchestrator-internals" aria-label="Permalink to &quot;Orchestrator Internals&quot;">​</a></h1><p>This section explores the internal architecture of PyOrchestrate&#39;s <code>Orchestrator</code>, explaining how it manages complex multi-agent systems through specialized components. Understanding these internals helps you build more sophisticated applications and troubleshoot advanced scenarios.</p><h2 id="what-is-the-orchestrator-architecture" tabindex="-1">What is the Orchestrator Architecture? <a class="header-anchor" href="#what-is-the-orchestrator-architecture" aria-label="Permalink to &quot;What is the Orchestrator Architecture?&quot;">​</a></h2><p>The Orchestrator uses a <strong>component-based architecture</strong> where different aspects of agent management are handled by specialized managers. Each manager focuses on a specific responsibility, making the system modular, maintainable, and extensible.</p><h2 id="why-this-architecture" tabindex="-1">Why This Architecture? <a class="header-anchor" href="#why-this-architecture" aria-label="Permalink to &quot;Why This Architecture?&quot;">​</a></h2><p>In multi-agent systems, the orchestrator must handle:</p><ul><li><strong>Agent dependencies</strong>: Ensuring agents start in the correct order</li><li><strong>Resource limits</strong>: Preventing system overload with too many concurrent agents</li><li><strong>Communication</strong>: Routing messages between agents and the orchestrator</li><li><strong>Event tracking</strong>: Recording and responding to system events</li><li><strong>External control</strong>: Allowing CLI and monitoring tools to interact with the system</li></ul><p>Managing all these concerns in a single component would create a complex, hard-to-understand system. Instead, PyOrchestrate separates these responsibilities into focused managers.</p><h2 id="the-six-specialized-managers" tabindex="-1">The Six Specialized Managers <a class="header-anchor" href="#the-six-specialized-managers" aria-label="Permalink to &quot;The Six Specialized Managers&quot;">​</a></h2><p>The Orchestrator coordinates six managers, each handling a specific aspect of the system:</p><h3 id="_1-dependencygraph" tabindex="-1">1. <a href="./dependency-graph.html">DependencyGraph</a> <a class="header-anchor" href="#_1-dependencygraph" aria-label="Permalink to &quot;1. [DependencyGraph](./dependency-graph.md)&quot;">​</a></h3><p><strong>Purpose</strong>: Ensures agents start in the correct order based on their dependencies.</p><p>If AgentB needs AgentA to be ready first, the DependencyGraph calculates the correct startup sequence. It also detects impossible configurations (like circular dependencies) before the system starts.</p><p><strong>Key Capabilities</strong>:</p><ul><li>Dependency validation</li><li>Topological sorting for startup order</li><li>Circular dependency detection</li></ul><h3 id="_2-agentlifecyclemanager" tabindex="-1">2. <a href="./lifecycle-manager.html">AgentLifecycleManager</a> <a class="header-anchor" href="#_2-agentlifecyclemanager" aria-label="Permalink to &quot;2. [AgentLifecycleManager](./lifecycle-manager.md)&quot;">​</a></h3><p><strong>Purpose</strong>: Manages the complete lifecycle of agents from creation to termination.</p><p>Handles registering agents, creating their process/thread instances, wiring up communication channels, and gracefully shutting them down when needed.</p><p><strong>Key Capabilities</strong>:</p><ul><li>Agent registration and configuration</li><li>Process/thread creation</li><li>Event wiring for monitoring and control</li><li>Graceful shutdown</li></ul><h3 id="_3-workerpoolscheduler" tabindex="-1">3. <a href="./worker-pool.html">WorkerPoolScheduler</a> <a class="header-anchor" href="#_3-workerpoolscheduler" aria-label="Permalink to &quot;3. [WorkerPoolScheduler](./worker-pool.md)&quot;">​</a></h3><p><strong>Purpose</strong>: Controls how many agents run concurrently to prevent resource exhaustion.</p><p>When you have 100 agents but want only 10 running at once, the WorkerPoolScheduler queues the rest and automatically starts them as others complete.</p><p><strong>Key Capabilities</strong>:</p><ul><li>Concurrency limiting</li><li>Agent queuing</li><li>Automatic scheduling</li><li>Resource management</li></ul><h3 id="_4-orchestratoreventbus" tabindex="-1">4. <a href="./event-bus.html">OrchestratorEventBus</a> <a class="header-anchor" href="#_4-orchestratoreventbus" aria-label="Permalink to &quot;4. [OrchestratorEventBus](./event-bus.md)&quot;">​</a></h3><p><strong>Purpose</strong>: Unified interface for event handling and history tracking.</p><p>Manages event callbacks (reacting to events) and event history (querying past events) through a single, consistent interface. Automatically records events when they occur.</p><p><strong>Key Capabilities</strong>:</p><ul><li>Event callback registration</li><li>Automatic event recording</li><li>Event history queries</li><li>Custom retention policies</li></ul><h3 id="_5-messagerouter" tabindex="-1">5. <a href="./message-router.html">MessageRouter</a> <a class="header-anchor" href="#_5-messagerouter" aria-label="Permalink to &quot;5. [MessageRouter](./message-router.md)&quot;">​</a></h3><p><strong>Purpose</strong>: Routes messages from agents to the orchestrator&#39;s event system.</p><p>Agents run in separate processes/threads and send messages to communicate. The MessageRouter receives these messages and converts them into orchestrator events that trigger callbacks and get recorded in history.</p><p><strong>Key Capabilities</strong>:</p><ul><li>Inter-process message reception</li><li>Event translation</li><li>Message filtering</li><li>Background processing</li></ul><h3 id="_6-commandinterface" tabindex="-1">6. <a href="./command-interface.html">CommandInterface</a> <a class="header-anchor" href="#_6-commandinterface" aria-label="Permalink to &quot;6. [CommandInterface](./command-interface.md)&quot;">​</a></h3><p><strong>Purpose</strong>: Enables external control via CLI and monitoring tools.</p><p>Exposes a command-based API over ZeroMQ that allows you to query agent status, view statistics, and control the orchestrator without modifying your application code.</p><p><strong>Key Capabilities</strong>:</p><ul><li>CLI command support</li><li>Runtime monitoring</li><li>Security via command whitelisting</li><li>Command audit trail</li></ul><h2 id="how-managers-work-together" tabindex="-1">How Managers Work Together <a class="header-anchor" href="#how-managers-work-together" aria-label="Permalink to &quot;How Managers Work Together&quot;">​</a></h2><p>The managers coordinate to handle complex workflows:</p><div class="tip custom-block"><p class="custom-block-title">Internal Memory</p><p>The orchestrator uses <code>OMemory</code> internally to store <code>AgentEntry</code> objects for each registered agent. Managers access this shared memory to coordinate agent lifecycle and retrieve agent metadata.</p></div><h3 id="agent-startup-flow" tabindex="-1">Agent Startup Flow <a class="header-anchor" href="#agent-startup-flow" aria-label="Permalink to &quot;Agent Startup Flow&quot;">​</a></h3><p>When you start the orchestrator, the managers coordinate:</p><ol><li><strong>DependencyGraph</strong> validates dependencies and computes startup order</li><li><strong>WorkerPoolScheduler</strong> receives the ordered list and starts agents respecting <code>max_workers</code></li><li><strong>AgentLifecycleManager</strong> creates each agent process/thread when scheduled</li><li><strong>MessageRouter</strong> begins listening for messages from agents</li><li><strong>OrchestratorEventBus</strong> records startup events and executes callbacks</li></ol><h3 id="agent-communication-flow" tabindex="-1">Agent Communication Flow <a class="header-anchor" href="#agent-communication-flow" aria-label="Permalink to &quot;Agent Communication Flow&quot;">​</a></h3><p>When an agent sends a message:</p>',48)),(t(),r(l,null,{default:i(()=>[h(n,{id:"mermaid-303",class:"mermaid my-class",graph:"flowchart%20TD%0A%20%20%20%20subgraph%20%22Agent%20Process%22%0A%20%20%20%20%20%20%20%20A%5BAgent%20Code%5D%0A%20%20%20%20%20%20%20%20B%5BMessageChannel%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20subgraph%20%22Orchestrator%22%0A%20%20%20%20%20%20%20%20C%5BMessageRouter%5D%0A%20%20%20%20%20%20%20%20D%5BOrchestratorEventBus%5D%0A%20%20%20%20%20%20%20%20E%5BYour%20Callbacks%5D%0A%20%20%20%20%20%20%20%20F%5BEvent%20History%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20A%20--%3E%7Csends%20message%7C%20B%0A%20%20%20%20B%20--%3E%7CIPC%7C%20C%0A%20%20%20%20C%20--%3E%7Ctranslates%20to%20event%7C%20D%0A%20%20%20%20D%20--%3E%7Cexecutes%7C%20E%0A%20%20%20%20D%20--%3E%7Crecords%7C%20F%0A%20%20%20%20%0A%20%20%20%20style%20A%20fill%3A%23e8f5e9%0A%20%20%20%20style%20B%20fill%3A%23e8f5e9%0A%20%20%20%20style%20C%20fill%3A%23e1f5ff%0A%20%20%20%20style%20D%20fill%3A%23e1f5ff%0A%20%20%20%20style%20E%20fill%3A%23fff4e1%0A%20%20%20%20style%20F%20fill%3A%23fce4ec%0A"})]),fallback:i(()=>s[0]||(s[0]=[e(" Loading... ")])),_:1})),s[4]||(s[4]=a("h3",{id:"cli-command-flow",tabindex:"-1"},[e("CLI Command Flow "),a("a",{class:"header-anchor",href:"#cli-command-flow","aria-label":'Permalink to "CLI Command Flow"'},"​")],-1)),s[5]||(s[5]=a("p",null,"When you run a CLI command:",-1)),(t(),r(l,null,{default:i(()=>[h(n,{id:"mermaid-310",class:"mermaid my-class",graph:"flowchart%20TD%0A%20%20%20%20subgraph%20%22External%20Tool%22%0A%20%20%20%20%20%20%20%20A%5BCLI%20Tool%3Cbr%2F%3Epyorchestrate%20status%5D%0A%20%20%20%20%20%20%20%20F%5BTerminal%20Output%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20subgraph%20%22Orchestrator%22%0A%20%20%20%20%20%20%20%20B%5BCommandInterface%5D%0A%20%20%20%20%20%20%20%20C%5BCommand%20Handler%5D%0A%20%20%20%20%20%20%20%20D%5BData%20Collector%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20A%20--%3E%7CZMQ%20connection%7C%20B%0A%20%20%20%20B%20--%3E%7Cvalidates%7C%20C%0A%20%20%20%20C%20--%3E%7Cgathers%20data%7C%20D%0A%20%20%20%20D%20--%3E%7Creturns%20JSON%7C%20A%0A%20%20%20%20A%20--%3E%7Cdisplays%7C%20F%0A%20%20%20%20%0A%20%20%20%20style%20A%20fill%3A%23e8f5e9%0A%20%20%20%20style%20F%20fill%3A%23fce4ec%0A%20%20%20%20style%20B%20fill%3A%23e1f5ff%0A%20%20%20%20style%20C%20fill%3A%23fff4e1%0A%20%20%20%20style%20D%20fill%3A%23fff4e1%0A"})]),fallback:i(()=>s[1]||(s[1]=[e(" Loading... ")])),_:1})),s[6]||(s[6]=a("h3",{id:"agent-lifecycle-states",tabindex:"-1"},[e("Agent Lifecycle States "),a("a",{class:"header-anchor",href:"#agent-lifecycle-states","aria-label":'Permalink to "Agent Lifecycle States"'},"​")],-1)),(t(),r(l,null,{default:i(()=>[h(n,{id:"mermaid-314",class:"mermaid my-class",graph:"stateDiagram-v2%0A%20%20%20%20%5B*%5D%20--%3E%20REGISTERED%3A%20lifecycle_manager.register_agent%0A%20%20%20%20REGISTERED%20--%3E%20QUEUED%3A%20queued%20by%20WorkerPoolScheduler%3Cbr%2F%3E(if%20pool%20full)%0A%20%20%20%20QUEUED%20--%3E%20RUNNING%3A%20started%20by%20WorkerPoolScheduler%0A%20%20%20%20RUNNING%20--%3E%20TERMINATED%3A%20recorded%20by%20MessageRouter%0A%20%20%20%20TERMINATED%20--%3E%20%5B*%5D%0A%20%20%20%20%0A%20%20%20%20note%20right%20of%20REGISTERED%3A%20Agent%20configuration%20stored%0A%20%20%20%20note%20right%20of%20QUEUED%3A%20Waiting%20for%20worker%20slot%0A%20%20%20%20note%20right%20of%20RUNNING%3A%20Process%2Fthread%20active%0A%20%20%20%20note%20right%20of%20TERMINATED%3A%20Cleanup%20complete%0A"})]),fallback:i(()=>s[2]||(s[2]=[e(" Loading... ")])),_:1})),s[7]||(s[7]=o(`<h2 id="configuration-examples" tabindex="-1">Configuration Examples <a class="header-anchor" href="#configuration-examples" aria-label="Permalink to &quot;Configuration Examples&quot;">​</a></h2><h3 id="basic-setup" tabindex="-1">Basic Setup <a class="header-anchor" href="#basic-setup" aria-label="Permalink to &quot;Basic Setup&quot;">​</a></h3><p>Simple orchestrator with default settings:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PyOrchestrate.core.orchestrator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Orchestrator</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Orchestrator()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator.register_agent(MyAgent, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;worker&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator.start()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator.join()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Blocks until all agents complete</span></span></code></pre></div><p><strong>Default Configuration</strong>:</p><ul><li><code>max_workers</code>: 5 concurrent agents</li><li><code>run_mode</code>: STOP_ON_EMPTY (stops when all agents done)</li><li><code>enable_command_interface</code>: True (CLI enabled)</li><li><code>history_max_events</code>: 5000 events</li></ul><h3 id="production-setup-with-monitoring" tabindex="-1">Production Setup with Monitoring <a class="header-anchor" href="#production-setup-with-monitoring" aria-label="Permalink to &quot;Production Setup with Monitoring&quot;">​</a></h3><p>Orchestrator with CLI control and increased limits:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Orchestrator.Config(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    max_workers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    run_mode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">RunMode.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DAEMON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    enable_command_interface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    command_zmq_address</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tcp://127.0.0.1:5570&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    allowed_commands</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;monitoring&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Read-only commands</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    history_max_events</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Orchestrator(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Use CLI to monitor: pyorchestrate status</span></span></code></pre></div><h3 id="with-agent-dependencies" tabindex="-1">With Agent Dependencies <a class="header-anchor" href="#with-agent-dependencies" aria-label="Permalink to &quot;With Agent Dependencies&quot;">​</a></h3><p>Configure agents with dependencies and custom settings:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Orchestrator(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Orchestrator.Config(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">max_workers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Register with dependencies</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator.register_agent(DatabaseAgent, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;db&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator.register_agent(CacheAgent, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cache&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator.register_agent(APIAgent, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;api&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator.add_dependency(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cache&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;db&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator.add_dependency(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;api&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;db&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cache&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator.start()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Starts in order: db → cache → api</span></span></code></pre></div><h3 id="custom-event-policies" tabindex="-1">Custom Event Policies <a class="header-anchor" href="#custom-event-policies" aria-label="Permalink to &quot;Custom Event Policies&quot;">​</a></h3><p>Control event history retention:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PyOrchestrate.core.orchestrator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EventStore, BucketRingStore</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Keep only last 2 heartbeats per agent</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">event_store </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EventStore(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    capacity</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    payload_max_bytes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">256</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    event_policies</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;AGENT_HEARTBEAT&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: BucketRingStore(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">per_agent_capacity</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Create orchestrator with custom event store</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Orchestrator()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator.event_bus.event_store </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event_store</span></span></code></pre></div><h2 id="underlying-utilities" tabindex="-1">Underlying Utilities <a class="header-anchor" href="#underlying-utilities" aria-label="Permalink to &quot;Underlying Utilities&quot;">​</a></h2><p>The managers use low-level utilities for their implementation:</p><table tabindex="0"><thead><tr><th>Utility</th><th>Used By</th><th>Purpose</th></tr></thead><tbody><tr><td><a href="./../utilities/event-manager.html">EventManager</a></td><td>OrchestratorEventBus</td><td>Callback execution</td></tr><tr><td><a href="./../utilities/plugin-manager.html">PluginManager</a></td><td>AgentLifecycleManager</td><td>Plugin lifecycle</td></tr><tr><td><a href="./../utilities/message-channel.html">MessageChannel</a></td><td>MessageRouter, CommandInterface</td><td>Inter-process communication</td></tr></tbody></table><p>These utilities are documented separately in the <a href="./../utilities/">Utilities</a> section.</p><h2 id="common-patterns" tabindex="-1">Common Patterns <a class="header-anchor" href="#common-patterns" aria-label="Permalink to &quot;Common Patterns&quot;">​</a></h2><h3 id="monitoring-agent-events" tabindex="-1">Monitoring Agent Events <a class="header-anchor" href="#monitoring-agent-events" aria-label="Permalink to &quot;Monitoring Agent Events&quot;">​</a></h3><p>React to agent lifecycle events:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> on_agent_error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(agent_name, error_message, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kwargs):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    logger.error(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Agent </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">agent_name</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> failed: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">error_message</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Take corrective action</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator.register_event(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OrchestratorEvent.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AGENT_ERROR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    on_agent_error</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="querying-event-history" tabindex="-1">Querying Event History <a class="header-anchor" href="#querying-event-history" aria-label="Permalink to &quot;Querying Event History&quot;">​</a></h3><p>Inspect past events for debugging or analytics:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Get recent agent errors</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">errors </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> orchestrator.event_bus.event_store.query(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    event_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;AGENT_ERROR&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    limit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> error </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> errors:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">error.agent_name</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">error.error_message</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="dynamic-agent-management" tabindex="-1">Dynamic Agent Management <a class="header-anchor" href="#dynamic-agent-management" aria-label="Permalink to &quot;Dynamic Agent Management&quot;">​</a></h3><p>Add agents during runtime:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator.start()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Start with initial agents</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Later, add more agents</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    orchestrator.register_agent(WorkerAgent, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;worker_</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    orchestrator.lifecycle_manager.start_agent(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;worker_</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="when-to-use-this-knowledge" tabindex="-1">When to Use This Knowledge <a class="header-anchor" href="#when-to-use-this-knowledge" aria-label="Permalink to &quot;When to Use This Knowledge&quot;">​</a></h2><p>Understanding orchestrator internals is useful when:</p><ul><li><strong>Building complex systems</strong>: Multiple agents with dependencies and resource constraints</li><li><strong>Debugging issues</strong>: Understanding message flows and event propagation</li><li><strong>Performance tuning</strong>: Optimizing concurrency and event history settings</li><li><strong>Extending the framework</strong>: Creating custom managers or modifying behavior</li><li><strong>Production deployment</strong>: Configuring monitoring and external control</li></ul><p>For simpler use cases, the high-level orchestrator API is sufficient.</p><h2 id="see-also" tabindex="-1">See Also <a class="header-anchor" href="#see-also" aria-label="Permalink to &quot;See Also&quot;">​</a></h2><ul><li><a href="./../../learn/introduction/orchestrator/">Introduction to Orchestrator</a> - High-level usage guide</li><li><a href="./../utilities/">Core Utilities</a> - Low-level building blocks</li><li><a href="./../../cli/">CLI Reference</a> - Command-line tools</li></ul>`,35))])}const C=p(c,[["render",g]]);export{f as __pageData,C as default};
