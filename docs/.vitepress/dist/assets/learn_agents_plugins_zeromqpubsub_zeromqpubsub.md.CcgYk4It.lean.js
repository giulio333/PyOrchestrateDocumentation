import{_ as i,c as a,a2 as e,o as n}from"./chunks/framework.BkvI1e0W.js";const c=JSON.parse('{"title":"ZeroMQPubSub Plugin","description":"Learn how to use the ZeroMQPubSub plugin to enable communication between agents using the ZeroMQ Publish-Subscribe pattern.","frontmatter":{"title":"ZeroMQPubSub Plugin","description":"Learn how to use the ZeroMQPubSub plugin to enable communication between agents using the ZeroMQ Publish-Subscribe pattern."},"headers":[],"relativePath":"learn/agents/plugins/zeromqpubsub/zeromqpubsub.md","filePath":"learn/agents/plugins/zeromqpubsub/zeromqpubsub.md","lastUpdated":1761471006000}'),t={name:"learn/agents/plugins/zeromqpubsub/zeromqpubsub.md"};function l(r,s,h,p,o,k){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="zeromqpubsub-plugin" tabindex="-1">ZeroMQPubSub Plugin <a class="header-anchor" href="#zeromqpubsub-plugin" aria-label="Permalink to &quot;ZeroMQPubSub Plugin&quot;">​</a></h1><h2 id="introduction-to-publish-subscribe-pattern" tabindex="-1">Introduction to Publish-Subscribe Pattern <a class="header-anchor" href="#introduction-to-publish-subscribe-pattern" aria-label="Permalink to &quot;Introduction to Publish-Subscribe Pattern&quot;">​</a></h2><p>The <strong>Publish-Subscribe (PubSub)</strong> pattern is a messaging paradigm where senders (publishers) send messages to topics without knowing who will receive them. Receivers (subscribers) express interest in specific topics and receive messages that match their interests. This decouples the sender and receiver, making it ideal for distributed systems where components need to communicate asynchronously.</p><h2 id="installation-instructions" tabindex="-1">Installation Instructions <a class="header-anchor" href="#installation-instructions" aria-label="Permalink to &quot;Installation Instructions&quot;">​</a></h2><p>To use the ZeroMQPubSub plugin, you need to install the <code>pyzmq</code> library. You can install it using pip:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pyzmq</span></span></code></pre></div><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h2><p>You can create a <strong>Publisher</strong> or <strong>Subscriber</strong> using the <code>ZeroMQPubSub</code> and use them to send and receive messages.</p><h3 id="publisher-example" tabindex="-1">Publisher Example <a class="header-anchor" href="#publisher-example" aria-label="Permalink to &quot;Publisher Example&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PyOrchestrate.core.agent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BaseProcessAgent</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PyOrchestrate.core.plugins </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ZeroMQPubSub, SocketType</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> zmq</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BaseProcessAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BaseProcessAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        zmq </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ZeroMQPubSub(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tcp://localhost:5555&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, SocketType.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PUB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    plugin: Plugin</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().execute()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.plugin.zmq.send(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, World!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.encode())</span></span></code></pre></div><h3 id="subscriber-example" tabindex="-1">Subscriber Example <a class="header-anchor" href="#subscriber-example" aria-label="Permalink to &quot;Subscriber Example&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PyOrchestrate.core.agent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PeriodicProcessAgent</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PyOrchestrate.core.plugins </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ZeroMQPubSub, SocketType</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> zmq</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SubscriberAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PeriodicProcessAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PeriodicProcessAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        zmq </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ZeroMQPubSub(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tcp://localhost:5555&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, SocketType.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SUB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    plugin: Plugin</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> runner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.plugin.zmq.recv()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.logger.info(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Received message: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">message.decode()</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="error-handling" tabindex="-1">Error Handling <a class="header-anchor" href="#error-handling" aria-label="Permalink to &quot;Error Handling&quot;">​</a></h2><h3 id="subscriber-connection-delay" tabindex="-1">Subscriber Connection Delay <a class="header-anchor" href="#subscriber-connection-delay" aria-label="Permalink to &quot;Subscriber Connection Delay&quot;">​</a></h3><p>ZeroMQ subscribers take some time to establish a connection with the publisher. If the publisher starts sending messages immediately, early messages may be lost. To mitigate this, you can introduce a delay before the publisher starts sending messages.</p><h3 id="message-loss-considerations" tabindex="-1">Message Loss Considerations <a class="header-anchor" href="#message-loss-considerations" aria-label="Permalink to &quot;Message Loss Considerations&quot;">​</a></h3><p>ZeroMQ does not queue messages for late subscribers by default. A subscriber that connects after messages are published will not receive past messages. To handle this, you can use delayed publishing or queue-based architectures.</p><h3 id="ensuring-proper-topic-subscriptions" tabindex="-1">Ensuring Proper Topic Subscriptions <a class="header-anchor" href="#ensuring-proper-topic-subscriptions" aria-label="Permalink to &quot;Ensuring Proper Topic Subscriptions&quot;">​</a></h3><p>To verify that subscribers correctly filter messages based on topic prefixes, you can log the received messages and their topics.</p><h2 id="advantages-of-zeromq-in-pyorchestrate" tabindex="-1">Advantages of ZeroMQ in PyOrchestrate <a class="header-anchor" href="#advantages-of-zeromq-in-pyorchestrate" aria-label="Permalink to &quot;Advantages of ZeroMQ in PyOrchestrate&quot;">​</a></h2><p>ZeroMQ is a high-performance asynchronous messaging library that is well-suited for distributed systems. It provides several advantages in PyOrchestrate:</p><ul><li><strong>Scalability</strong>: ZeroMQ can handle a large number of connections and messages efficiently.</li><li><strong>Flexibility</strong>: It supports various messaging patterns, including PubSub, request-reply, and push-pull.</li><li><strong>Ease of Use</strong>: ZeroMQ&#39;s API is simple and easy to integrate with PyOrchestrate agents.</li></ul><h2 id="resource-links" tabindex="-1">Resource Links <a class="header-anchor" href="#resource-links" aria-label="Permalink to &quot;Resource Links&quot;">​</a></h2><p>For further exploration, refer to the following resources:</p><ul><li><a href="https://zeromq.org/documentation/" target="_blank" rel="noreferrer">ZeroMQ Official Documentation</a></li><li><a href="https://pyzmq.readthedocs.io/en/latest/" target="_blank" rel="noreferrer">PyZMQ Documentation</a></li><li><a href="http://zguide.zeromq.org/page:all" target="_blank" rel="noreferrer">ZeroMQ Guide</a></li></ul>`,25)]))}const u=i(t,[["render",l]]);export{c as __pageData,u as default};
