import{_ as i,c as a,a2 as t,o as n}from"./chunks/framework.BkvI1e0W.js";const e="/PyOrchestrateDocumentation/assets/config_l.CafWAOfM.svg",l="/PyOrchestrateDocumentation/assets/config_d.BV3vVqMp.svg",y=JSON.parse('{"title":"Config and Validation","description":"","frontmatter":{"title":"Config and Validation","editLink":false},"headers":[],"relativePath":"learn/config_and_validation.md","filePath":"learn/config_and_validation.md","lastUpdated":1761471006000}'),h={name:"learn/config_and_validation.md"};function r(o,s,p,d,k,c){return n(),a("div",null,s[0]||(s[0]=[t('<h1 id="config-and-validation" tabindex="-1">Config and Validation <a class="header-anchor" href="#config-and-validation" aria-label="Permalink to &quot;Config and Validation&quot;">​</a></h1><p><img src="'+e+'" alt="alt text" class="light-only" loading="lazy"><img src="'+l+`" alt="alt text" class="dark-only" loading="lazy"></p><p>Every Agent and Orchestrator in PyOrchestrate comes with a <strong>Config object</strong>.<br> You can think of it as the <strong>blueprint</strong> that defines how each component behaves.</p><p>Instead of hard-coding parameters in your classes, <code>Config</code> provides a structured way to:</p><ul><li>Store <strong>built-in attributes</strong> (loop interval, execution mode, etc.).</li><li>Add <strong>user-defined attributes</strong> (output paths, thresholds, custom values).</li><li>Validate parameters before execution (see the <a href="#validation">Validation</a> section).</li></ul><h2 id="how-it-works" tabindex="-1">How It Works <a class="header-anchor" href="#how-it-works" aria-label="Permalink to &quot;How It Works&quot;">​</a></h2><p>A <code>Config</code> class is always defined inside its parent (Agent or Orchestrator).</p><ul><li><strong>Defaults:</strong> class attributes define default values.</li><li><strong>Override in class:</strong> you can subclass and redefine defaults.</li><li><strong>Override at runtime:</strong> you can pass values directly to the constructor.</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PeriodicProcessAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PeriodicProcessAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # Overriding Built-in attribute, inherited from parent</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        limit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # User-defined attribute</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        output_directory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;output&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    config: Config</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Override at runtime</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">custom_config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyAgent.Config(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">limit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">output_directory</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;custom&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The <code>Config</code> class inherits from the respective parent&#39;s <code>Config</code> class. This allows you to customize the configuration while retaining the built-in ones.</p></div><h2 id="built-in-vs-user-defined-attributes" tabindex="-1">Built-in vs User-Defined Attributes <a class="header-anchor" href="#built-in-vs-user-defined-attributes" aria-label="Permalink to &quot;Built-in vs User-Defined Attributes&quot;">​</a></h2><ul><li><strong>Built-in attributes</strong>: provided by the base class, control core behavior.</li><li><strong>User-defined attributes</strong>: defined by you, tailored to your custom logic.</li></ul><p>Both are treated the same way by the framework, which means you can freely mix them.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>All <strong>built-in attribute</strong> are well documented. For example, see <a href="./agents/built-in-agents/loopingagent.html#configuration">LoopingAgent Configuration</a>:</p></div><h2 id="validation" tabindex="-1">Validation <a class="header-anchor" href="#validation" aria-label="Permalink to &quot;Validation&quot;">​</a></h2><p>Having a <code>Config</code> object is great, but how do you make sure its values are correct?<br> That’s where <strong>validation</strong> comes in.</p><p>Before an Agent or Orchestrator starts, its <code>Config</code> is checked.<br> If something looks wrong, validation can <strong>stop the execution</strong> or just <strong>warn</strong> you (depending on how strict you want to be).</p><h3 id="custom-validation" tabindex="-1">Custom Validation <a class="header-anchor" href="#custom-validation" aria-label="Permalink to &quot;Custom Validation&quot;">​</a></h3><p>Every <code>Config</code> has a <code>validate</code> method you can override.<br> This lets you add <strong>custom rules</strong> for your own attributes.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BaseClassConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;Configuration with a single custom field and simple validation.&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    threshold: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> validate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        results </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().validate()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # Raise ERROR if threshold is not between 0 and 30</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.threshold </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> or</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.threshold </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            results.append(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                ValidationResult(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">                    field</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;threshold&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">                    message</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Threshold must be between 0 and 30.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">                    severity</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ValidationSeverity.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ERROR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            )</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> results</span></span></code></pre></div><h3 id="validation-policy" tabindex="-1">Validation Policy <a class="header-anchor" href="#validation-policy" aria-label="Permalink to &quot;Validation Policy&quot;">​</a></h3><p>By default, validation applies reasonable checks.<br> But you can override the <code>validation_policy</code> attribute to decide how strict it should be.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PyOrchestrate.core.utilities.validation </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ValidationPolicy</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BaseClassConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    threshold: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    validation_policy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ValidationPolicy(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">        ignore_warnings</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">False</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">        ignore_errors</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">False</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span></code></pre></div><p>This allows you to:</p><ul><li>Ignore warnings (useful in development).</li><li>Enforce errors strictly (ideal for production).</li></ul><hr><h3 id="validation-severity" tabindex="-1">Validation Severity <a class="header-anchor" href="#validation-severity" aria-label="Permalink to &quot;Validation Severity&quot;">​</a></h3><p>Not all validation results are the same.<br> Each issue is tagged with a <strong>severity level</strong>:</p><table tabindex="0"><thead><tr><th>Severity</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td><code>WARNING</code></td><td style="text-align:left;">The component will still start, but a log message is produced.</td></tr><tr><td><code>ERROR</code></td><td style="text-align:left;">The component will not start. Used for critical misconfigurations.</td></tr><tr><td><code>CRITICAL</code></td><td style="text-align:left;">Checks that must <strong>never</strong> be ignored. Reserved for essential rules in built-in Agents.</td></tr></tbody></table><hr><h2 id="why-it-matters" tabindex="-1">Why It Matters <a class="header-anchor" href="#why-it-matters" aria-label="Permalink to &quot;Why It Matters&quot;">​</a></h2><p>Validation gives you <strong>confidence</strong>.<br> You know that when your Orchestrator or Agent starts, it’s running with parameters that make sense.</p><p>It saves you from:</p><ul><li>hidden bugs caused by typos in configs,</li><li>confusing runtime errors,</li><li>agents starting with unsafe defaults.</li></ul><p>Think of validation as your <strong>safety net</strong>: it lets you catch mistakes early and keep your system predictable.</p>`,35)]))}const u=i(h,[["render",r]]);export{y as __pageData,u as default};
