import{_ as i,c as a,a2 as e,o as n}from"./chunks/framework.BkvI1e0W.js";const g=JSON.parse('{"title":"ZeroMQReqRep Plugin","description":"","frontmatter":{},"headers":[],"relativePath":"learn/agents/plugins/zeromqreqrep/zeromqreqrep.md","filePath":"learn/agents/plugins/zeromqreqrep/zeromqreqrep.md","lastUpdated":1761471006000}'),t={name:"learn/agents/plugins/zeromqreqrep/zeromqreqrep.md"};function l(r,s,h,p,k,o){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="zeromqreqrep-plugin" tabindex="-1">ZeroMQReqRep Plugin <a class="header-anchor" href="#zeromqreqrep-plugin" aria-label="Permalink to &quot;ZeroMQReqRep Plugin&quot;">​</a></h1><h2 id="introduction-to-request-reply-pattern" tabindex="-1">Introduction to Request-Reply Pattern <a class="header-anchor" href="#introduction-to-request-reply-pattern" aria-label="Permalink to &quot;Introduction to Request-Reply Pattern&quot;">​</a></h2><p>The <strong>Request-Reply (ReqRep)</strong> pattern is a messaging paradigm where a client (requester) sends a request to a server (replier) and waits for a reply. This pattern is useful for synchronous communication where the client needs a response from the server to proceed.</p><h2 id="installation-instructions" tabindex="-1">Installation Instructions <a class="header-anchor" href="#installation-instructions" aria-label="Permalink to &quot;Installation Instructions&quot;">​</a></h2><p>To use the ZeroMQReqRep plugin, you need to install the <code>pyzmq</code> library. You can install it using pip:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pyzmq</span></span></code></pre></div><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h2><p>You can create a <strong>Requester</strong> or <strong>Replier</strong> using the <code>ZeroMQReqRep</code> and use them to send and receive messages.</p><h3 id="requester-example" tabindex="-1">Requester Example <a class="header-anchor" href="#requester-example" aria-label="Permalink to &quot;Requester Example&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PyOrchestrate.core.agent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BaseProcessAgent</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PyOrchestrate.core.plugins </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ZeroMQReqRep, SocketType</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> zmq</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RequesterAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BaseProcessAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BaseProcessAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        zmq </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ZeroMQReqRep(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tcp://localhost:5555&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, SocketType.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">REQ</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    plugin: Plugin</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().execute()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.plugin.zmq.send(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, Server!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.encode())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        reply </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.plugin.zmq.recv()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.logger.info(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Received reply: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">reply.decode()</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="replier-example" tabindex="-1">Replier Example <a class="header-anchor" href="#replier-example" aria-label="Permalink to &quot;Replier Example&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PyOrchestrate.core.agent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PeriodicProcessAgent</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PyOrchestrate.core.plugins </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ZeroMQReqRep, SocketType</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> zmq</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ReplierAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PeriodicProcessAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PeriodicProcessAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        zmq </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ZeroMQReqRep(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tcp://localhost:5555&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, SocketType.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">REP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    plugin: Plugin</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> runner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.plugin.zmq.recv()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.logger.info(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Received message: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">message.decode()</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.plugin.zmq.send(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, Client!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.encode())</span></span></code></pre></div><h2 id="error-handling" tabindex="-1">Error Handling <a class="header-anchor" href="#error-handling" aria-label="Permalink to &quot;Error Handling&quot;">​</a></h2><h3 id="request-timeout" tabindex="-1">Request Timeout <a class="header-anchor" href="#request-timeout" aria-label="Permalink to &quot;Request Timeout&quot;">​</a></h3><p>In a request-reply pattern, the requester may not receive a reply if the server is down or unresponsive. To handle this, you can set a timeout for the request and retry if necessary.</p><h3 id="message-loss-considerations" tabindex="-1">Message Loss Considerations <a class="header-anchor" href="#message-loss-considerations" aria-label="Permalink to &quot;Message Loss Considerations&quot;">​</a></h3><p>ZeroMQ does not guarantee message delivery. If a message is lost, the requester may need to retry the request. Implementing a retry mechanism can help ensure reliable communication.</p><h3 id="ensuring-proper-request-reply-matching" tabindex="-1">Ensuring Proper Request-Reply Matching <a class="header-anchor" href="#ensuring-proper-request-reply-matching" aria-label="Permalink to &quot;Ensuring Proper Request-Reply Matching&quot;">​</a></h3><p>To verify that requests and replies are correctly matched, you can include unique identifiers in the messages and log the received messages and their identifiers.</p><h2 id="advantages-of-zeromq-in-pyorchestrate" tabindex="-1">Advantages of ZeroMQ in PyOrchestrate <a class="header-anchor" href="#advantages-of-zeromq-in-pyorchestrate" aria-label="Permalink to &quot;Advantages of ZeroMQ in PyOrchestrate&quot;">​</a></h2><p>ZeroMQ is a high-performance asynchronous messaging library that is well-suited for distributed systems. It provides several advantages in PyOrchestrate:</p><ul><li><strong>Scalability</strong>: ZeroMQ can handle a large number of connections and messages efficiently.</li><li><strong>Flexibility</strong>: It supports various messaging patterns, including ReqRep, publish-subscribe, and push-pull.</li><li><strong>Ease of Use</strong>: ZeroMQ&#39;s API is simple and easy to integrate with PyOrchestrate agents.</li></ul><h2 id="resource-links" tabindex="-1">Resource Links <a class="header-anchor" href="#resource-links" aria-label="Permalink to &quot;Resource Links&quot;">​</a></h2><p>For further exploration, refer to the following resources:</p><ul><li><a href="https://zeromq.org/documentation/" target="_blank" rel="noreferrer">ZeroMQ Official Documentation</a></li><li><a href="https://pyzmq.readthedocs.io/en/latest/" target="_blank" rel="noreferrer">PyZMQ Documentation</a></li><li><a href="http://zguide.zeromq.org/page:all" target="_blank" rel="noreferrer">ZeroMQ Guide</a></li></ul>`,25)]))}const E=i(t,[["render",l]]);export{g as __pageData,E as default};
