import{_ as t,c as a,a2 as n,o}from"./chunks/framework.BkvI1e0W.js";const u=JSON.parse('{"title":"Agents","description":"","frontmatter":{"title":"Agents","editLink":true},"headers":[],"relativePath":"advanced/built-in-agents/index.md","filePath":"advanced/built-in-agents/index.md","lastUpdated":1761471006000}'),s={name:"advanced/built-in-agents/index.md"};function r(d,e,i,c,g,l){return o(),a("div",null,e[0]||(e[0]=[n('<h1 id="advanced-agents" tabindex="-1">Advanced Agents <a class="header-anchor" href="#advanced-agents" aria-label="Permalink to &quot;Advanced Agents&quot;">​</a></h1><p>In PyOrchestrate, <strong>agents</strong> are the core building blocks.</p><p>Each agent runs as a <strong>process</strong> or a <strong>thread</strong> and acts as a container for your custom logic. Whether you need continuous execution, periodic tasks, or one-shot operations, agents are designed to fit a variety of scenarios and adapt to your workflows.</p><p>Before diving into the <strong>built-in agents</strong>, let’s take a moment to understand some core concepts that define how agents work in PyOrchestrate.</p>',4)]))}const h=t(s,[["render",r]]);export{u as __pageData,h as default};
