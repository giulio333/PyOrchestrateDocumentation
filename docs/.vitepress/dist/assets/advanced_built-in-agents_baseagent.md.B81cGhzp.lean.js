import{_ as o,c as r,a2 as t,b as i,w as a,a3 as d,B as c,o as n,G as l,a as g}from"./chunks/framework.BkvI1e0W.js";const B=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"advanced/built-in-agents/baseagent.md","filePath":"advanced/built-in-agents/baseagent.md","lastUpdated":1761471006000}'),u={name:"advanced/built-in-agents/baseagent.md"};function h(p,e,A,m,b,v){const s=c("Mermaid");return n(),r("div",null,[e[1]||(e[1]=t('<h2 id="baseagent" tabindex="-1">BaseAgent <a class="header-anchor" href="#baseagent" aria-label="Permalink to &quot;BaseAgent&quot;">​</a></h2><p>The <strong>BaseAgent</strong> is the foundation of all other agents in PyOrchestrate. It provides the basic structure for any custom agent. Use it as a starting point to create your own agents with completely custom behavior.</p><h3 id="key-features" tabindex="-1">Key Features: <a class="header-anchor" href="#key-features" aria-label="Permalink to &quot;Key Features:&quot;">​</a></h3><h4 id="run-method" tabindex="-1">run Method <a class="header-anchor" href="#run-method" aria-label="Permalink to &quot;run Method&quot;">​</a></h4><p>This is the entry point for all agents, encapsulating their entire lifecycle and handling the low-level execution logic.</p><p>In essence, the <code>run()</code> method in BaseAgent overrides the run method from <code>threading.Thread</code> or <code>multiprocessing.Process</code>.</p><p>It begins by recording the <strong>start time</strong> and setting up the <strong>logger</strong> to track operations. Next, it <strong>validates the configuration</strong>, performs the initial <strong>setup</strong>, and signals readiness through the <strong>ready_event</strong>. The main logic of the agent will be defined in the execute method, which must be implemented in derived classes. Any errors during execution are caught and logged. Finally, the agent signals completion by setting the close_event and logs the total execution time. This structured flow ensures robustness and consistency across all agents.</p>',7)),(n(),i(d,null,{default:a(()=>[l(s,{id:"mermaid-21",class:"mermaid my-class",graph:"sequenceDiagram%0A%20%20%20%20autonumber%0A%20%20%20%20participant%20BaseAgent%0A%20%20%20%20participant%20BaseAgent.Config%0A%20%20%20%20participant%20BaseAgent.StateEvents%0A%20%20%20%20participant%20BaseAgent.ControlEvents%0A%0A%20%20%20%20BaseAgent-%3E%3EBaseAgent%3A%20Setup%20Logger%0A%20%20%20%20BaseAgent-%3E%3EBaseAgent.Config%3A%20Validate%20Configuration%0A%20%20%20%20break%20Validation%20Failed%0A%20%20%20%20%20%20%20%20BaseAgent.Config--%3E%3EBaseAgent%3A%20Raise%20ValidationError%0A%20%20%20%20end%0A%20%20%20%20BaseAgent-%3E%3EBaseAgent.ControlEvents%3A%20Wait%20for%20setup_event%0A%20%20%20%20BaseAgent-%3E%3EBaseAgent%3A%20setup()%0A%20%20%20%20BaseAgent-%3E%3EBaseAgent.StateEvents%3A%20Set%20ready_event%0A%20%20%20%20BaseAgent-%3E%3EBaseAgent.ControlEvents%3A%20Wait%20for%20execute_event%0A%20%20%20%20BaseAgent-%3E%3EBaseAgent%3A%20execute()%0A%20%20%20%20break%20If%20Exception%20Occurs%0A%20%20%20%20%20%20%20%20BaseAgent-%3E%3EBaseAgent%3A%20Log%20Exception%0A%20%20%20%20end%0A%20%20%20%20BaseAgent-%3E%3EBaseAgent.StateEvents%3A%20Set%20close_event%0A"})]),fallback:a(()=>e[0]||(e[0]=[g(" Loading... ")])),_:1})),e[2]||(e[2]=t('<div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The <code>execute()</code> method is abstract and must be overridden in all derived classes.</p></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The <code>setup()</code> method is abstract and must be overridden in all derived classes.</p></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>The <code>run()</code> method orchestrates the entire lifecycle of the agent, from <code>setup</code> to <code>shutdown</code>.</p><p>Marked as <code>@final</code> to prevent overriding in derived class ensuring that the core logic remains consistent across all agents.</p></div><h3 id="use-case" tabindex="-1">Use Case: <a class="header-anchor" href="#use-case" aria-label="Permalink to &quot;Use Case:&quot;">​</a></h3><p>When no predefined agent meets your requirements, the <code>BaseAgent</code> is ideal for implementing custom logic.</p><h3 id="baseagent-advanced-usage" tabindex="-1">BaseAgent Advanced Usage: <a class="header-anchor" href="#baseagent-advanced-usage" aria-label="Permalink to &quot;BaseAgent Advanced Usage:&quot;">​</a></h3><p>For a deeper dive into how agents work and their advanced use cases, explore the <strong>Advanced Insights section</strong>.</p>',7))])}const E=o(u,[["render",h]]);export{B as __pageData,E as default};
