import{_ as o,c as i,a2 as t,b as n,w as a,a3 as c,B as d,o as r,G as h,a as l}from"./chunks/framework.BkvI1e0W.js";const b=JSON.parse('{"title":"BaseOrchestrator","description":"","frontmatter":{"title":"BaseOrchestrator"},"headers":[],"relativePath":"learn/orchestrator/built-in-orchestrator/baseorchestrator.md","filePath":"learn/orchestrator/built-in-orchestrator/baseorchestrator.md","lastUpdated":1761471006000}'),p={name:"learn/orchestrator/built-in-orchestrator/baseorchestrator.md"};function g(u,e,m,E,A,f){const s=d("Mermaid");return r(),i("div",null,[e[1]||(e[1]=t('<h1 id="baseorchestrator" tabindex="-1">BaseOrchestrator <a class="header-anchor" href="#baseorchestrator" aria-label="Permalink to &quot;BaseOrchestrator&quot;">​</a></h1><p>The <strong>BaseOrchestrator</strong> is the foundation of all other orchestrators in PyOrchestrate. It provides the basic structure for any custom orchestrator.</p><h2 id="why-use-baseorchestrator" tabindex="-1">Why use BaseOrchestrator? <a class="header-anchor" href="#why-use-baseorchestrator" aria-label="Permalink to &quot;Why use BaseOrchestrator?&quot;">​</a></h2><p>Use it as a starting point to create your own orchestrators with completely custom behavior.</p><h2 id="sequence-diagram" tabindex="-1">Sequence Diagram <a class="header-anchor" href="#sequence-diagram" aria-label="Permalink to &quot;Sequence Diagram&quot;">​</a></h2><p>The sequence diagram below illustrates the lifecycle of the <code>BaseAgent</code> after it is started.</p>',6)),(r(),n(c,null,{default:a(()=>[h(s,{id:"mermaid-18",class:"mermaid my-class",graph:"sequenceDiagram%0A%20%20%20%20participant%20Config%20as%20Orchestrator.Config%0A%20%20%20%20participant%20Orchestrator%20as%20Orchestrator%0A%20%20%20%20participant%20Memory%20as%20OMemory%0A%20%20%20%20participant%20EventManager%20as%20EventManager%0A%20%20%20%20participant%20Agents%20as%20Registered%20Agents%0A%20%20%20%20participant%20CLI%20as%20CLI%20%2F%20Web%20UI%0A%20%20%20%20participant%20MsgThread%20as%20Message%20Thread%0A%0A%20%20%20%20Orchestrator-%3E%3EConfig%3A%20validate_config()%0A%20%20%20%20Orchestrator-%3E%3EMemory%3A%20init%20agent%20memory%0A%20%20%20%20Orchestrator-%3E%3EEventManager%3A%20init%20centralized%20event%20manager%0A%20%20%20%20Orchestrator-%3E%3EMsgThread%3A%20start%20background%20message%20loop%0A%20%20%20%20Orchestrator-%3E%3ECLI%3A%20open%20UNIX%20socket%20(if%20enabled)%0A%0A%20%20%20%20CLI--%3E%3EOrchestrator%3A%20external%20command%20(start%2C%20stop%2C%20status)%0A%20%20%20%20Orchestrator-%3E%3EAgents%3A%20register%20agents%0A%20%20%20%20Orchestrator-%3E%3EOrchestrator%3A%20validate_dependencies()%0A%20%20%20%20Orchestrator-%3E%3EAgents%3A%20start%20agents%20(respecting%20max_workers)%0A%0A%20%20%20%20Agents--%3E%3EOrchestrator%3A%20send%20events%20(STARTED%2C%20READY%2C%20TERMINATED)%0A%20%20%20%20Orchestrator-%3E%3EEventManager%3A%20emit%20orchestrator%20events%0A%0A%20%20%20%20loop%20Monitor%0A%20%20%20%20%20%20%20%20Orchestrator-%3E%3EAgents%3A%20check%20status%0A%20%20%20%20%20%20%20%20Agents--%3E%3EOrchestrator%3A%20terminated%20%2F%20alive%0A%20%20%20%20%20%20%20%20Orchestrator-%3E%3EOrchestrator%3A%20start%20queued%20agents%20if%20slot%20available%0A%20%20%20%20end%0A%0A%20%20%20%20alt%20RunMode%20%3D%20STOP_ON_EMPTY%0A%20%20%20%20%20%20%20%20Orchestrator-%3E%3EOrchestrator%3A%20shutdown%20after%20all%20agents%20finish%0A%20%20%20%20else%20RunMode%20%3D%20DAEMON%0A%20%20%20%20%20%20%20%20CLI--%3E%3EOrchestrator%3A%20shutdown%20command%0A%20%20%20%20%20%20%20%20Orchestrator-%3E%3EOrchestrator%3A%20graceful%20shutdown%0A%20%20%20%20end%0A%0A%20%20%20%20Orchestrator-%3E%3EMsgThread%3A%20stop%20message%20loop%0A%20%20%20%20Orchestrator-%3E%3ECLI%3A%20close%20command%20channel%0A%20%20%20%20Orchestrator-%3E%3EEventManager%3A%20record%20SHUTDOWN%20event%0A%0A"})]),fallback:a(()=>e[0]||(e[0]=[l(" Loading... ")])),_:1})),e[2]||(e[2]=t(`<h2 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-label="Permalink to &quot;Configuration&quot;">​</a></h2><p>The <code>BaseAgent</code> class defines its own configuration object via the <code>Config</code> class.</p><table tabindex="0"><thead><tr><th>Attribute</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td><code>logger_config</code></td><td><code>LoggerConfig()</code></td><td>Defines configuration for the logger.</td></tr><tr><td><code>validation_policy</code></td><td><code>ValidationPolicy()</code></td><td>Defines the validation policy.</td></tr><tr><td><code>check_interval</code></td><td>1</td><td>The interval (in seconds) at which the Orchestrator checks the status of agents.</td></tr><tr><td><code>max_workers</code></td><td>5</td><td>The maximum number of worker threads to use for executing tasks.</td></tr><tr><td><code>enable_command_interface</code></td><td>True</td><td>Enable external command interface via UNIX socket (runtime CLI).</td></tr><tr><td><code>command_socket_path</code></td><td><code>/tmp/pyorchestrate.sock</code></td><td>Filesystem path used for the UNIX socket when the command interface is enabled.</td></tr><tr><td><code>allowed_commands</code></td><td>None</td><td>Restricts which external commands are accepted by the CLI: a set of command names, a preset name (string), or <code>None</code> to allow all commands.</td></tr><tr><td><code>run_mode</code></td><td><code>STOP_ON_EMPTY</code></td><td>Lifecycle policy: <code>STOP_ON_EMPTY</code> or <code>DAEMON</code>.</td></tr><tr><td><code>history_max_events</code></td><td>5000</td><td>Maximum number of events to store in the Orchestrator&#39;s internal history (ring buffer size).</td></tr><tr><td><code>history_payload_bytes</code></td><td>256</td><td>Maximum number of bytes stored for each event payload in the history.</td></tr></tbody></table><div class="info custom-block"><p class="custom-block-title">Example</p><p>For example to create an Orchestrator with a maximum of 2 workers, you can do the following:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">o_config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Orchestrator.Config(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">max_workers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Orchestrator(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">o_config)</span></span></code></pre></div><p>If you don&#39;t provide custom values, the Orchestrator will use the default values defined in the <code>Config</code> class.</p></div><p>To learn more about the configuration object, click <a href="./../../config_and_validation.html">here</a>.</p><h2 id="use-case" tabindex="-1">Use Case <a class="header-anchor" href="#use-case" aria-label="Permalink to &quot;Use Case&quot;">​</a></h2><p>When no predefined Orchestrator meets your requirements, the <code>BaseOrchestrator</code> is ideal for implementing custom logic.</p><h2 id="attributes" tabindex="-1">Attributes <a class="header-anchor" href="#attributes" aria-label="Permalink to &quot;Attributes&quot;">​</a></h2><h3 id="logger" tabindex="-1">Logger <a class="header-anchor" href="#logger" aria-label="Permalink to &quot;Logger&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">logger: Logger</span></span></code></pre></div><p>The logger object for the agent. Available levels are <code>DEBUG</code>, <code>INFO</code>, <code>SUCCESS</code>, <code>WARNING</code>, <code>ERROR</code>, and <code>CRITICAL</code>.</p><h3 id="config" tabindex="-1">Config <a class="header-anchor" href="#config" aria-label="Permalink to &quot;Config&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config: BaseAgent.Config</span></span></code></pre></div><p>The configuration object for the agent.</p>`,14))])}const y=o(p,[["render",g]]);export{b as __pageData,y as default};
