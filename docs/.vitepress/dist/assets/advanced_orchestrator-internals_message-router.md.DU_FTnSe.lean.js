import{_ as a,c as i,a2 as e,o as n}from"./chunks/framework.BkvI1e0W.js";const g=JSON.parse('{"title":"MessageRouter","description":"","frontmatter":{"title":"MessageRouter","editLink":true},"headers":[],"relativePath":"advanced/orchestrator-internals/message-router.md","filePath":"advanced/orchestrator-internals/message-router.md","lastUpdated":1761471006000}'),t={name:"advanced/orchestrator-internals/message-router.md"};function l(h,s,r,p,o,k){return n(),i("div",null,s[0]||(s[0]=[e(`<h1 id="messagerouter" tabindex="-1">MessageRouter <a class="header-anchor" href="#messagerouter" aria-label="Permalink to &quot;MessageRouter&quot;">​</a></h1><p>The <strong>MessageRouter</strong> is responsible for routing messages from agents to the orchestrator&#39;s event system. It acts as a translation layer that converts agent-specific messages into orchestrator events.</p><h2 id="purpose-and-design" tabindex="-1">Purpose and Design <a class="header-anchor" href="#purpose-and-design" aria-label="Permalink to &quot;Purpose and Design&quot;">​</a></h2><p>Agents and the orchestrator run in separate processes (or threads) and need a way to communicate. Agents send status updates, error notifications, and heartbeats to the orchestrator, which must be translated into orchestrator events that trigger registered callbacks and get recorded in event history.</p><p>The MessageRouter bridges this gap by:</p><ul><li>Listening for messages from agents via the <code>MessageChannel</code></li><li>Translating <code>AgentEvent</code> types to <code>OrchestratorEvent</code> types</li><li>Filtering out messages from terminated agents</li><li>Managing its own lifecycle independently</li></ul><h2 id="core-responsibilities" tabindex="-1">Core Responsibilities <a class="header-anchor" href="#core-responsibilities" aria-label="Permalink to &quot;Core Responsibilities&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Responsibility</th><th>Description</th></tr></thead><tbody><tr><td><strong>Message Reception</strong></td><td>Listen for incoming agent messages via MessageChannel</td></tr><tr><td><strong>Event Translation</strong></td><td>Convert agent events to orchestrator events</td></tr><tr><td><strong>Message Filtering</strong></td><td>Ignore messages from terminated agents</td></tr><tr><td><strong>Lifecycle Management</strong></td><td>Start/stop background message handling thread</td></tr><tr><td><strong>Error Handling</strong></td><td>Handle malformed messages and connection issues</td></tr></tbody></table><h2 id="communication-flow" tabindex="-1">Communication Flow <a class="header-anchor" href="#communication-flow" aria-label="Permalink to &quot;Communication Flow&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Agent (separate process)</span></span>
<span class="line"><span>    ↓ sends ServiceMessage</span></span>
<span class="line"><span>MessageChannel (process-safe queue)</span></span>
<span class="line"><span>    ↓ receives message</span></span>
<span class="line"><span>MessageRouter (background thread)</span></span>
<span class="line"><span>    ↓ translates to OrchestratorEvent</span></span>
<span class="line"><span>OrchestratorEventBus</span></span>
<span class="line"><span>    ├─→ Execute callbacks</span></span>
<span class="line"><span>    └─→ Record to history</span></span></code></pre></div><h2 id="how-it-works" tabindex="-1">How It Works <a class="header-anchor" href="#how-it-works" aria-label="Permalink to &quot;How It Works&quot;">​</a></h2><h3 id="background-thread-operation" tabindex="-1">Background Thread Operation <a class="header-anchor" href="#background-thread-operation" aria-label="Permalink to &quot;Background Thread Operation&quot;">​</a></h3><p>The MessageRouter runs in a <strong>background thread</strong> that continuously polls the MessageChannel for incoming messages:</p><ol><li>Agent sends a <code>ServiceMessage</code> (e.g., &quot;I&#39;m ready&quot;)</li><li>MessageRouter receives the message via <code>ChannelHandler</code></li><li>Router translates <code>AgentEvent.AGENT_READY</code> → <code>OrchestratorEvent.AGENT_READY</code></li><li>Router calls <code>event_bus.emit(OrchestratorEvent.AGENT_READY, ...)</code></li><li>Callbacks are executed and event is recorded to history</li></ol><h3 id="event-type-mapping" tabindex="-1">Event Type Mapping <a class="header-anchor" href="#event-type-mapping" aria-label="Permalink to &quot;Event Type Mapping&quot;">​</a></h3><p>The router maintains an internal mapping between agent and orchestrator events:</p><table tabindex="0"><thead><tr><th>AgentEvent</th><th>OrchestratorEvent</th><th>Purpose</th></tr></thead><tbody><tr><td><code>AGENT_STARTED</code></td><td><code>AGENT_STARTED</code></td><td>Agent has started execution</td></tr><tr><td><code>AGENT_READY</code></td><td><code>AGENT_READY</code></td><td>Agent is ready to work</td></tr><tr><td><code>AGENT_TERMINATED</code></td><td><code>AGENT_TERMINATED</code></td><td>Agent has stopped</td></tr><tr><td><code>AGENT_ERROR</code></td><td><code>AGENT_ERROR</code></td><td>Agent encountered an error</td></tr><tr><td><code>AGENT_HEARTBEAT</code></td><td><code>AGENT_HEARTBEAT</code></td><td>Agent is alive</td></tr></tbody></table><h2 id="lifecycle-management" tabindex="-1">Lifecycle Management <a class="header-anchor" href="#lifecycle-management" aria-label="Permalink to &quot;Lifecycle Management&quot;">​</a></h2><h3 id="starting-the-router" tabindex="-1">Starting the Router <a class="header-anchor" href="#starting-the-router" aria-label="Permalink to &quot;Starting the Router&quot;">​</a></h3><p>The MessageRouter is started automatically when the Orchestrator initializes:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># In Orchestrator.__init__()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.message_router </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MessageRouter(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    message_channel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.message_channel,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    event_bus</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.event_bus,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    logger</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.logger</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Automatically started</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.message_router.start()</span></span></code></pre></div><h3 id="stopping-the-router" tabindex="-1">Stopping the Router <a class="header-anchor" href="#stopping-the-router" aria-label="Permalink to &quot;Stopping the Router&quot;">​</a></h3><p>The router is stopped during orchestrator shutdown:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># During Orchestrator.join() cleanup</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.message_router.stop(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">timeout</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>The <code>stop()</code> method:</p><ul><li>Signals the background thread to exit</li><li>Waits up to <code>timeout</code> seconds for graceful shutdown</li><li>Ensures all pending messages are processed</li></ul><h2 id="message-filtering" tabindex="-1">Message Filtering <a class="header-anchor" href="#message-filtering" aria-label="Permalink to &quot;Message Filtering&quot;">​</a></h2><h3 id="terminated-agent-filtering" tabindex="-1">Terminated Agent Filtering <a class="header-anchor" href="#terminated-agent-filtering" aria-label="Permalink to &quot;Terminated Agent Filtering&quot;">​</a></h3><p>The MessageRouter maintains a set of terminated agents and filters out their messages:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># When agent terminates</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">message_router.mark_agent_terminated(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;worker1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Future messages from worker1 are ignored</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Prevents stale messages from affecting the orchestrator</span></span></code></pre></div><p><strong>Why filtering is important</strong>:</p><ul><li>Agents may send messages during shutdown</li><li>Message queue may contain delayed messages</li><li>Prevents confusion with agents that have the same name but different instances</li></ul><h3 id="filter-behavior" tabindex="-1">Filter Behavior <a class="header-anchor" href="#filter-behavior" aria-label="Permalink to &quot;Filter Behavior&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Agent &quot;worker1&quot; terminates → mark_agent_terminated(&quot;worker1&quot;)</span></span>
<span class="line"><span>    ↓</span></span>
<span class="line"><span>Message arrives from &quot;worker1&quot;</span></span>
<span class="line"><span>    ↓</span></span>
<span class="line"><span>Router checks: is &quot;worker1&quot; in terminated set?</span></span>
<span class="line"><span>    ↓ YES</span></span>
<span class="line"><span>Message is ignored (not converted to event)</span></span></code></pre></div><h2 id="integration-with-messagechannel" tabindex="-1">Integration with MessageChannel <a class="header-anchor" href="#integration-with-messagechannel" aria-label="Permalink to &quot;Integration with MessageChannel&quot;">​</a></h2><p>The MessageRouter uses the <code>MessageChannel</code> for inter-process communication:</p><h3 id="process-safe-communication" tabindex="-1">Process-Safe Communication <a class="header-anchor" href="#process-safe-communication" aria-label="Permalink to &quot;Process-Safe Communication&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Agent Process A          MessageChannel          Orchestrator Process</span></span>
<span class="line"><span>    |                         |                         |</span></span>
<span class="line"><span>    |--ServiceMessage--------&gt;|                         |</span></span>
<span class="line"><span>    |                         |&lt;----poll message--------|</span></span>
<span class="line"><span>    |                         |                         |</span></span>
<span class="line"><span>    |                         |----message-------------&gt;|</span></span>
<span class="line"><span>    |                         |                    MessageRouter</span></span></code></pre></div><h3 id="message-format" tabindex="-1">Message Format <a class="header-anchor" href="#message-format" aria-label="Permalink to &quot;Message Format&quot;">​</a></h3><p>Agents send structured <code>ServiceMessage</code> objects:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Agent sends ready notification</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.send_message(ServiceMessage.create_status(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    sender</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    status</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ready&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    event_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">AgentEvent.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AGENT_READY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><p>The MessageRouter receives and extracts:</p><ul><li><code>sender</code>: Agent name</li><li><code>event_name</code>: Type of event</li><li>Additional data (error messages, timestamps, etc.)</li></ul><h2 id="error-handling" tabindex="-1">Error Handling <a class="header-anchor" href="#error-handling" aria-label="Permalink to &quot;Error Handling&quot;">​</a></h2><h3 id="malformed-messages" tabindex="-1">Malformed Messages <a class="header-anchor" href="#malformed-messages" aria-label="Permalink to &quot;Malformed Messages&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># If message is missing required fields</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    event_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message.get(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;event_name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sender </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message.get(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sender&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">except</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> KeyError</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    logger.error(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Malformed message: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Message is discarded, router continues</span></span></code></pre></div><h3 id="connection-issues" tabindex="-1">Connection Issues <a class="header-anchor" href="#connection-issues" aria-label="Permalink to &quot;Connection Issues&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># If MessageChannel connection fails</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> channel_handler.receive()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">except</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ChannelError </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    logger.error(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Channel error: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Retry logic or graceful degradation</span></span></code></pre></div><h3 id="event-emission-failures" tabindex="-1">Event Emission Failures <a class="header-anchor" href="#event-emission-failures" aria-label="Permalink to &quot;Event Emission Failures&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># If event_bus.emit() raises exception</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    event_bus.emit(event_type, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">event_data)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">except</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Exception</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    logger.error(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Failed to emit event: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Error is logged but router continues processing</span></span></code></pre></div><h2 id="common-patterns" tabindex="-1">Common Patterns <a class="header-anchor" href="#common-patterns" aria-label="Permalink to &quot;Common Patterns&quot;">​</a></h2><h3 id="monitoring-message-flow" tabindex="-1">Monitoring Message Flow <a class="header-anchor" href="#monitoring-message-flow" aria-label="Permalink to &quot;Monitoring Message Flow&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Log all messages being routed</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> on_message_routed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event_type, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kwargs):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    logger.debug(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Routed: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">event_type</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> with data </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kwargs</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator.event_bus.register_callback(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OrchestratorEvent.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AGENT_READY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    on_message_routed</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="detecting-communication-issues" tabindex="-1">Detecting Communication Issues <a class="header-anchor" href="#detecting-communication-issues" aria-label="Permalink to &quot;Detecting Communication Issues&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Check if agents are sending messages</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">last_message_time </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> time.time()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> update_last_message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kwargs):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    global</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> last_message_time</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    last_message_time </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> time.time()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator.event_bus.register_callback(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OrchestratorEvent.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AGENT_HEARTBEAT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    update_last_message</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Alert if no messages received for too long</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> time.time() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> last_message_time </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 60</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    logger.error(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;No agent messages received in 60 seconds!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="performance-considerations" tabindex="-1">Performance Considerations <a class="header-anchor" href="#performance-considerations" aria-label="Permalink to &quot;Performance Considerations&quot;">​</a></h2><h3 id="non-blocking-design" tabindex="-1">Non-Blocking Design <a class="header-anchor" href="#non-blocking-design" aria-label="Permalink to &quot;Non-Blocking Design&quot;">​</a></h3><p>The MessageRouter runs in a <strong>separate thread</strong>, ensuring:</p><ul><li>Message routing never blocks the main orchestrator loop</li><li>Multiple agents can send messages concurrently</li><li>Slow event callbacks don&#39;t delay message processing</li></ul><h3 id="message-queue-depth" tabindex="-1">Message Queue Depth <a class="header-anchor" href="#message-queue-depth" aria-label="Permalink to &quot;Message Queue Depth&quot;">​</a></h3><p>The underlying MessageChannel maintains a queue of messages:</p><ul><li>Large queue = can buffer many messages (uses more memory)</li><li>Small queue = may lose messages under high load</li><li>Default settings work for most use cases</li></ul><h3 id="filtering-overhead" tabindex="-1">Filtering Overhead <a class="header-anchor" href="#filtering-overhead" aria-label="Permalink to &quot;Filtering Overhead&quot;">​</a></h3><p>Checking if an agent is terminated is <strong>O(1)</strong> (set lookup):</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Very fast operation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sender </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._terminated_agents:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Skip message</span></span></code></pre></div><h2 id="comparison-with-direct-event-emission" tabindex="-1">Comparison with Direct Event Emission <a class="header-anchor" href="#comparison-with-direct-event-emission" aria-label="Permalink to &quot;Comparison with Direct Event Emission&quot;">​</a></h2><h3 id="without-messagerouter-before-refactoring" tabindex="-1">Without MessageRouter (before refactoring) <a class="header-anchor" href="#without-messagerouter-before-refactoring" aria-label="Permalink to &quot;Without MessageRouter (before refactoring)&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Orchestrator had to manually check messages</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    msg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message_channel.receive()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> msg.event_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;AGENT_READY&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        event_manager.emit(OrchestratorEvent.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AGENT_READY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    elif</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> msg.event_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;AGENT_ERROR&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        event_manager.emit(OrchestratorEvent.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AGENT_ERROR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # ... more conditions</span></span></code></pre></div><h3 id="with-messagerouter-after-refactoring" tabindex="-1">With MessageRouter (after refactoring) <a class="header-anchor" href="#with-messagerouter-after-refactoring" aria-label="Permalink to &quot;With MessageRouter (after refactoring)&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># MessageRouter handles everything automatically</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">message_router.start()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># That&#39;s it!</span></span></code></pre></div><p>The refactored design eliminates boilerplate and centralizes message routing logic.</p><h2 id="best-practices" tabindex="-1">Best Practices <a class="header-anchor" href="#best-practices" aria-label="Permalink to &quot;Best Practices&quot;">​</a></h2><h3 id="_1-let-the-framework-handle-it" tabindex="-1">1. Let the Framework Handle It <a class="header-anchor" href="#_1-let-the-framework-handle-it" aria-label="Permalink to &quot;1. Let the Framework Handle It&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Good: Trust the MessageRouter</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Orchestrator()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># MessageRouter is created and started automatically</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Avoid: Manually managing message routing</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># (not needed, handled by framework)</span></span></code></pre></div><h3 id="_2-mark-terminated-agents-promptly" tabindex="-1">2. Mark Terminated Agents Promptly <a class="header-anchor" href="#_2-mark-terminated-agents-promptly" aria-label="Permalink to &quot;2. Mark Terminated Agents Promptly&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Good: Mark agents as terminated immediately</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> on_agent_terminated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(agent_name, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kwargs):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    orchestrator.message_router.mark_agent_terminated(agent_name)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator.event_bus.register_callback(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OrchestratorEvent.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AGENT_TERMINATED</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    on_agent_terminated</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="_3-monitor-router-health-in-production" tabindex="-1">3. Monitor Router Health in Production <a class="header-anchor" href="#_3-monitor-router-health-in-production" aria-label="Permalink to &quot;3. Monitor Router Health in Production&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Check if MessageRouter thread is alive</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> orchestrator.message_router._thread.is_alive():</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    logger.critical(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MessageRouter thread died!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Take recovery action</span></span></code></pre></div><h2 id="debugging" tabindex="-1">Debugging <a class="header-anchor" href="#debugging" aria-label="Permalink to &quot;Debugging&quot;">​</a></h2><h3 id="enable-debug-logging" tabindex="-1">Enable Debug Logging <a class="header-anchor" href="#enable-debug-logging" aria-label="Permalink to &quot;Enable Debug Logging&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> logging</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">logging.getLogger(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;PyOrchestrate.MessageRouter&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).setLevel(logging.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DEBUG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>This shows:</p><ul><li>Every message received</li><li>Event translations</li><li>Filtered messages</li><li>Errors and warnings</li></ul><h3 id="inspect-terminated-agents" tabindex="-1">Inspect Terminated Agents <a class="header-anchor" href="#inspect-terminated-agents" aria-label="Permalink to &quot;Inspect Terminated Agents&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># See which agents are being filtered</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terminated </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> orchestrator.message_router._terminated_agents</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Filtering messages from: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terminated</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="see-also" tabindex="-1">See Also <a class="header-anchor" href="#see-also" aria-label="Permalink to &quot;See Also&quot;">​</a></h2><ul><li><a href="./event-bus.html">OrchestratorEventBus</a> - Receives translated events</li><li><a href="./../utilities/message-channel.html">MessageChannel</a> - Low-level message transport</li><li><a href="./lifecycle-manager.html">AgentLifecycleManager</a> - Creates agents with MessageChannel</li><li><a href="./">Orchestrator Internals</a> - Architecture overview</li></ul>`,87)]))}const c=a(t,[["render",l]]);export{g as __pageData,c as default};
