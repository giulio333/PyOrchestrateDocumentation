import{_ as a,c as i,a2 as e,o as n}from"./chunks/framework.BkvI1e0W.js";const c=JSON.parse('{"title":"DependencyGraph","description":"","frontmatter":{"title":"DependencyGraph","editLink":true},"headers":[],"relativePath":"advanced/orchestrator-internals/dependency-graph.md","filePath":"advanced/orchestrator-internals/dependency-graph.md","lastUpdated":1761471006000}'),t={name:"advanced/orchestrator-internals/dependency-graph.md"};function l(r,s,h,p,o,d){return n(),i("div",null,s[0]||(s[0]=[e(`<h1 id="dependencygraph" tabindex="-1">DependencyGraph <a class="header-anchor" href="#dependencygraph" aria-label="Permalink to &quot;DependencyGraph&quot;">​</a></h1><p>The <strong>DependencyGraph</strong> manages agent dependencies and determines the correct startup order. It ensures that agents are started in the right sequence, preventing issues where an agent tries to communicate with another agent that hasn&#39;t started yet.</p><h2 id="purpose-and-design" tabindex="-1">Purpose and Design <a class="header-anchor" href="#purpose-and-design" aria-label="Permalink to &quot;Purpose and Design&quot;">​</a></h2><p>In multi-agent systems, agents often depend on other agents being ready before they can function properly. For example:</p><ul><li>A <strong>DataProcessor</strong> agent depends on a <strong>DatabaseConnector</strong> agent</li><li>An <strong>APIServer</strong> agent depends on both <strong>Database</strong> and <strong>Cache</strong> agents</li><li>Multiple <strong>Worker</strong> agents depend on a <strong>Coordinator</strong> agent</li></ul><p>The DependencyGraph solves this by:</p><ul><li>Tracking dependencies between agents</li><li>Validating that all dependencies can be satisfied</li><li>Computing the correct startup order using topological sorting</li><li>Detecting circular dependencies that would cause deadlocks</li></ul><h2 id="core-responsibilities" tabindex="-1">Core Responsibilities <a class="header-anchor" href="#core-responsibilities" aria-label="Permalink to &quot;Core Responsibilities&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Responsibility</th><th>Description</th></tr></thead><tbody><tr><td><strong>Dependency Tracking</strong></td><td>Maintains relationships between agents</td></tr><tr><td><strong>Validation</strong></td><td>Checks for circular dependencies and missing agents</td></tr><tr><td><strong>Startup Ordering</strong></td><td>Computes topological sort for correct startup sequence</td></tr><tr><td><strong>Error Detection</strong></td><td>Identifies impossible dependency configurations</td></tr></tbody></table><h2 id="how-it-works" tabindex="-1">How It Works <a class="header-anchor" href="#how-it-works" aria-label="Permalink to &quot;How It Works&quot;">​</a></h2><h3 id="dependency-declaration" tabindex="-1">Dependency Declaration <a class="header-anchor" href="#dependency-declaration" aria-label="Permalink to &quot;Dependency Declaration&quot;">​</a></h3><p>Declare dependencies using the orchestrator&#39;s API:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># AgentB depends on AgentA</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator.add_dependency(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;AgentB&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;AgentA&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># AgentC depends on both AgentA and AgentB</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator.add_dependency(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;AgentC&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;AgentA&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;AgentB&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre></div><h3 id="automatic-validation" tabindex="-1">Automatic Validation <a class="header-anchor" href="#automatic-validation" aria-label="Permalink to &quot;Automatic Validation&quot;">​</a></h3><p>Before starting agents, the orchestrator validates the dependency graph:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator.validate_dependencies()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Checks for:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 1. Circular dependencies (A → B → A)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 2. Missing dependencies (references to unregistered agents)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 3. Invalid configurations</span></span></code></pre></div><h3 id="topological-sorting" tabindex="-1">Topological Sorting <a class="header-anchor" href="#topological-sorting" aria-label="Permalink to &quot;Topological Sorting&quot;">​</a></h3><p>The DependencyGraph computes the startup order:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Registered agents: [&quot;AgentA&quot;, &quot;AgentB&quot;, &quot;AgentC&quot;]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Dependencies: B→A, C→[A,B]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ordered_agents </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dependency_graph.topological_sort(agent_names)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Result: [&quot;AgentA&quot;, &quot;AgentB&quot;, &quot;AgentC&quot;]</span></span></code></pre></div><p><strong>Result</strong>: Agents start in dependency order, ensuring dependencies are always ready.</p><h2 id="validation-and-error-detection" tabindex="-1">Validation and Error Detection <a class="header-anchor" href="#validation-and-error-detection" aria-label="Permalink to &quot;Validation and Error Detection&quot;">​</a></h2><h3 id="circular-dependencies" tabindex="-1">Circular Dependencies <a class="header-anchor" href="#circular-dependencies" aria-label="Permalink to &quot;Circular Dependencies&quot;">​</a></h3><p>The DependencyGraph detects <strong>circular dependencies</strong> that would cause deadlocks:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Invalid configuration</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator.add_dependency(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;AgentA&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;AgentB&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator.add_dependency(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;AgentB&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;AgentA&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ❌ Circular!</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    orchestrator.validate_dependencies()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">except</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ValueError</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Error: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Output: &quot;Circular dependency detected&quot;</span></span></code></pre></div><p><strong>Why this matters</strong>: If AgentA waits for AgentB, and AgentB waits for AgentA, neither can start—resulting in a deadlock.</p><h3 id="missing-dependencies" tabindex="-1">Missing Dependencies <a class="header-anchor" href="#missing-dependencies" aria-label="Permalink to &quot;Missing Dependencies&quot;">​</a></h3><p>The graph also detects references to <strong>unregistered agents</strong>:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator.register_agent(WorkerAgent, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;worker&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator.add_dependency(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;worker&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;database&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ❌ database not registered</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    orchestrator.validate_dependencies()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">except</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ValueError</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Error: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Output: &quot;Agent &#39;worker&#39; depends on unregistered agent &#39;database&#39;&quot;</span></span></code></pre></div><h3 id="validation-timing" tabindex="-1">Validation Timing <a class="header-anchor" href="#validation-timing" aria-label="Permalink to &quot;Validation Timing&quot;">​</a></h3><p>Validation occurs automatically during <code>orchestrator.start()</code>:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator.start()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Internally calls:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 1. validate_dependencies()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 2. topological_sort() to get order</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 3. Start agents in order</span></span></code></pre></div><h2 id="common-use-cases" tabindex="-1">Common Use Cases <a class="header-anchor" href="#common-use-cases" aria-label="Permalink to &quot;Common Use Cases&quot;">​</a></h2><h3 id="linear-dependency-chain" tabindex="-1">Linear Dependency Chain <a class="header-anchor" href="#linear-dependency-chain" aria-label="Permalink to &quot;Linear Dependency Chain&quot;">​</a></h3><p>Create a <strong>pipeline</strong> where each agent depends on the previous one:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Pipeline: DataCollector → DataProcessor → DataWriter</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator.register_agent(DataCollector, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;collector&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator.register_agent(DataProcessor, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;processor&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator.register_agent(DataWriter, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;writer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator.add_dependency(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;processor&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;collector&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator.add_dependency(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;writer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;processor&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator.start()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Startup order: collector → processor → writer</span></span></code></pre></div><p><strong>Use case</strong>: Data processing pipelines, ETL workflows</p><h3 id="diamond-dependency" tabindex="-1">Diamond Dependency <a class="header-anchor" href="#diamond-dependency" aria-label="Permalink to &quot;Diamond Dependency&quot;">​</a></h3><p>Multiple agents depend on the same base agent:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator.register_agent(DatabaseAgent, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;database&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator.register_agent(CacheAgent, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cache&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator.register_agent(APIAgent, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;api&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator.register_agent(MonitorAgent, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;monitor&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Both cache and monitor depend on database</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator.add_dependency(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cache&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;database&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator.add_dependency(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;monitor&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;database&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># API depends on both database and cache</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator.add_dependency(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;api&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;database&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cache&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator.start()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Startup order: database → cache, monitor (parallel) → api</span></span></code></pre></div><p><strong>Use case</strong>: Microservices architecture, shared infrastructure</p><h3 id="parallel-independent-agents" tabindex="-1">Parallel Independent Agents <a class="header-anchor" href="#parallel-independent-agents" aria-label="Permalink to &quot;Parallel Independent Agents&quot;">​</a></h3><p>Agents with <strong>no dependencies</strong> start in parallel (limited by <code>max_workers</code>):</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># No dependencies = parallel startup</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator.register_agent(WorkerAgent, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;worker1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator.register_agent(WorkerAgent, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;worker2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator.register_agent(WorkerAgent, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;worker3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator.start()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># All agents start simultaneously (respecting max_workers limit)</span></span></code></pre></div><p><strong>Use case</strong>: Worker pools, parallel task execution</p><h2 id="integration-with-workerpoolscheduler" tabindex="-1">Integration with WorkerPoolScheduler <a class="header-anchor" href="#integration-with-workerpoolscheduler" aria-label="Permalink to &quot;Integration with WorkerPoolScheduler&quot;">​</a></h2><p>The DependencyGraph works in conjunction with the WorkerPoolScheduler to ensure both <strong>correct ordering</strong> and <strong>controlled concurrency</strong>:</p><table tabindex="0"><thead><tr><th>Component</th><th>Responsibility</th></tr></thead><tbody><tr><td><strong>DependencyGraph</strong></td><td>Determines <strong>startup order</strong> (which agent starts first)</td></tr><tr><td><strong>WorkerPoolScheduler</strong></td><td>Enforces <strong>concurrency limits</strong> (how many agents run at once)</td></tr></tbody></table><p><strong>Example</strong>:</p><ul><li>DependencyGraph says: &quot;Start database, then cache, then api&quot;</li><li>WorkerPoolScheduler says: &quot;But only start 2 at a time (max_workers=2)&quot;</li><li>Result: database and cache start first, api waits in queue</li></ul><h2 id="algorithms" tabindex="-1">Algorithms <a class="header-anchor" href="#algorithms" aria-label="Permalink to &quot;Algorithms&quot;">​</a></h2><p>The DependencyGraph uses two well-known graph algorithms:</p><h3 id="cycle-detection" tabindex="-1">Cycle Detection <a class="header-anchor" href="#cycle-detection" aria-label="Permalink to &quot;Cycle Detection&quot;">​</a></h3><p>Uses <strong>Depth-First Search (DFS)</strong> to detect circular dependencies:</p><ul><li>Traverses the dependency graph</li><li>Tracks visited nodes and recursion stack</li><li>Detects back edges that indicate cycles</li><li><strong>Time Complexity</strong>: O(V + E)</li></ul><h3 id="topological-sorting-1" tabindex="-1">Topological Sorting <a class="header-anchor" href="#topological-sorting-1" aria-label="Permalink to &quot;Topological Sorting&quot;">​</a></h3><p>Uses <strong>Kahn&#39;s Algorithm</strong> to compute startup order:</p><ul><li>Builds in-degree map (how many dependencies each agent has)</li><li>Starts with agents having zero dependencies</li><li>Processes agents in order, reducing in-degrees</li><li><strong>Time Complexity</strong>: O(V + E)</li></ul><p>Both algorithms run only once during orchestrator startup, so performance impact is minimal even with hundreds of agents.</p><h2 id="best-practices" tabindex="-1">Best Practices <a class="header-anchor" href="#best-practices" aria-label="Permalink to &quot;Best Practices&quot;">​</a></h2><h3 id="_1-declare-dependencies-explicitly" tabindex="-1">1. Declare Dependencies Explicitly <a class="header-anchor" href="#_1-declare-dependencies-explicitly" aria-label="Permalink to &quot;1. Declare Dependencies Explicitly&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ✅ Good: Clear dependency declaration</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator.add_dependency(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;processor&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;collector&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ❌ Bad: Implicit assumption without declaration</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># (Processor assumes collector is ready but doesn&#39;t declare it)</span></span></code></pre></div><h3 id="_2-avoid-circular-dependencies" tabindex="-1">2. Avoid Circular Dependencies <a class="header-anchor" href="#_2-avoid-circular-dependencies" aria-label="Permalink to &quot;2. Avoid Circular Dependencies&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ❌ Bad: Creates deadlock</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator.add_dependency(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;A&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;B&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator.add_dependency(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;B&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;A&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ✅ Good: Use coordinator pattern</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator.add_dependency(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;A&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;coordinator&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator.add_dependency(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;B&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;coordinator&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre></div><h3 id="_3-validate-before-starting" tabindex="-1">3. Validate Before Starting <a class="header-anchor" href="#_3-validate-before-starting" aria-label="Permalink to &quot;3. Validate Before Starting&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    orchestrator.validate_dependencies()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">except</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ValueError</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    logger.error(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Invalid configuration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sys.exit(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator.start()</span></span></code></pre></div><h3 id="_4-document-complex-dependencies" tabindex="-1">4. Document Complex Dependencies <a class="header-anchor" href="#_4-document-complex-dependencies" aria-label="Permalink to &quot;4. Document Complex Dependencies&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Document the reason for dependencies</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator.add_dependency(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;api_server&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;database&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cache&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># API needs both services ready</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="see-also" tabindex="-1">See Also <a class="header-anchor" href="#see-also" aria-label="Permalink to &quot;See Also&quot;">​</a></h2><ul><li><a href="./lifecycle-manager.html">AgentLifecycleManager</a> - Creates agents in dependency order</li><li><a href="./worker-pool.html">WorkerPoolScheduler</a> - Manages concurrent execution</li><li><a href="./">Orchestrator Internals</a> - Architecture overview</li></ul>`,69)]))}const g=a(t,[["render",l]]);export{c as __pageData,g as default};
