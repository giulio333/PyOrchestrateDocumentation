import{_ as p,c as r,a2 as t,b as n,w as i,a3 as l,B as d,o as e,G as h,a as o}from"./chunks/framework.BkvI1e0W.js";const k="/PyOrchestrateDocumentation/assets/example_1_l.2AhZFL7q.svg",g="/PyOrchestrateDocumentation/assets/example_1_d.D0AXRLkR.svg",c="/PyOrchestrateDocumentation/assets/overview_l.DkW3FrzI.svg",u="/PyOrchestrateDocumentation/assets/overview_d.I0Q6s25C.svg",q=JSON.parse('{"title":"Agents","description":"","frontmatter":{"title":"Agents","editLink":true},"headers":[],"relativePath":"learn/agents/index.md","filePath":"learn/agents/index.md","lastUpdated":1761471006000}'),E={name:"learn/agents/index.md"};function y(F,s,m,f,C,b){const a=d("Mermaid");return e(),r("div",null,[s[2]||(s[2]=t('<h1 id="agents" tabindex="-1">Agents <a class="header-anchor" href="#agents" aria-label="Permalink to &quot;Agents&quot;">​</a></h1><p>You can think of an agent as a <strong>container</strong> for your custom logic, encapsulating how it runs, what it does, and how it interacts with other agents.</p><p>The framework provides a range of <a href="./built-in-agents/baseagent.html">built-in agents</a> designed as extensible templates, allowing you to implement your own custom logic while leveraging their predefined structure and behavior.</p><p>All you need to do is choose the agent that best fits your requirements and inherit from it to create your own custom agent.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>For <strong>more information</strong>, see this <a href="./../introduction/agents/">link</a>.</p></div><h3 id="why-use-agents" tabindex="-1">Why Use Agents? <a class="header-anchor" href="#why-use-agents" aria-label="Permalink to &quot;Why Use Agents?&quot;">​</a></h3><p>Agents save you from reinventing the wheel by offering ready-made solutions for common architectural challenges, such as managing threads/processes, synchronizing events, and handling errors.</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><p>Here’s an example of a custom agent that inherits from <code>PeriodicProcessAgent</code>.</p><p><img src="'+k+'" alt="alt text" class="light-only" loading="lazy"><img src="'+g+`" alt="alt text" class="dark-only" loading="lazy"></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PeriodicProcessAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;Agent Class that logs a message periodically.&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        Setup method for the agent.</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().setup()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.logger.info(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;FileWriter </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> initialized. pid=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.pid</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> runner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        Runner method for the agent.</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.logger.info(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Doing some work&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p><img src="`+c+'" alt="alt text" class="light-only" loading="lazy"><img src="'+u+`" alt="alt text" class="dark-only" loading="lazy"></p><h3 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-label="Permalink to &quot;Configuration&quot;">​</a></h3><p>Every agent has a set of <strong>parameters</strong> that define its own data. These parameters are stored in a <code>Config</code> object.</p><p>The <code>Config</code> class is used by the agent to <strong>create a configuration object for itself</strong>.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>In every agent, the <code>Config</code> class inherits from the respective parent agent&#39;s <code>Config</code> class. This allows you to customize the agent&#39;s configuration while retaining the built-in ones.</p></div><div class="info custom-block"><p class="custom-block-title">Example</p><p>See the <a href="./../config_and_validation.html">Config and Validation</a> section for more details on how to define and use configuration classes.</p></div><h3 id="stateevents" tabindex="-1"><strong>StateEvents</strong> <a class="header-anchor" href="#stateevents" aria-label="Permalink to &quot;**StateEvents**&quot;">​</a></h3><p>Every agent has a set of <strong>events</strong> that signal its internal state. These events are stored in a <code>StateEvents</code> object and allow external components to <strong>understand the agent&#39;s current state</strong>.</p><p>The <code>StateEvents</code> class is used by the agent to <strong>define its own state events</strong>.</p><p>Some of the <strong>built-in</strong> state events are:</p><table tabindex="0"><thead><tr><th>State</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td><code>start_event</code></td><td style="text-align:left;">Event to signal that the agent has been started.</td></tr><tr><td><code>ready_event</code></td><td style="text-align:left;">Event to signal that the agent is ready to start the execution.</td></tr><tr><td><code>close_event</code></td><td style="text-align:left;">Event to signal that the agent has completed the execution.</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>In every agent, the <code>StateEvents</code> class inherits from the respective parent agent&#39;s <code>StateEvents</code> class. This allows you to customize the agent&#39;s state events while retaining the built-in ones.</p></div><div class="info custom-block"><p class="custom-block-title">Example</p><p>In our example, we didn&#39;t define any custom state events. We will discuss customizing these in more advanced topics.</p></div><h3 id="controlevents" tabindex="-1"><strong>ControlEvents</strong> <a class="header-anchor" href="#controlevents" aria-label="Permalink to &quot;**ControlEvents**&quot;">​</a></h3><p>Every agent has a set of <strong>events</strong> that are used to send commands to the agent. These events are stored in a <code>ControlEvents</code> object and allow external systems to <strong>control the agent’s behavior</strong>.</p><p>The <code>ControlEvents</code> class is used by the agent to <strong>define its own control events</strong>.</p><p>Some of the <strong>built-in</strong> control events are:</p><table tabindex="0"><thead><tr><th>State</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td><code>setup_event</code></td><td style="text-align:left;">Event to signal that the agent can be set up.</td></tr><tr><td><code>execute_event</code></td><td style="text-align:left;">Event to signal that the agent can execute its logic.</td></tr><tr><td><code>stop_event</code></td><td style="text-align:left;">Event to signal that the agent must stop.</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>In every agent, the <code>ControlEvents</code> class inherits from the respective parent agent&#39;s <code>ControlEvents</code> class. This allows you to customize the agent&#39;s control events while retaining the built-in ones.</p></div><div class="info custom-block"><p class="custom-block-title">Example</p><p>In our example, we didn&#39;t define any custom control events. We will discuss customizing these in more advanced topics.</p></div><h3 id="plugin" tabindex="-1">Plugin <a class="header-anchor" href="#plugin" aria-label="Permalink to &quot;Plugin&quot;">​</a></h3><p>The <code>Plugin</code> class is used by the agent to <strong>create a plugin object for itself</strong>.</p><p>The <code>agent.plugin</code> object is useful for retrieving <strong>built-in</strong> or <strong>user-initialized</strong> <strong>plugins</strong>. The agent will autonomously <strong>initialize</strong> and <strong>release</strong> their resources at startup and shutdown. This ensures that the plugins are properly managed throughout the agent&#39;s lifecycle.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>In every agent, the <code>Plugin</code> class inherits from the respective parent agent&#39;s <code>Plugin</code> class. This allows you to customize the agent&#39;s plugin while retaining the built-in ones.</p></div><div class="info custom-block"><p class="custom-block-title">Example</p><p>For example <code>MyAgent</code> class define its own plugin class via parent agent&#39;s <code>Plugin</code> class.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark has-focused-lines vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PeriodicProcessAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#</span></span>
<span class="line"></span>
<span class="line has-focus"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PeriodicProcessAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span></span>
<span class="line has-focus"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        zmq </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ZmqPubSub(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tcp://*:5555&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,zmq.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PUB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    plugin: Plugin</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> runner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().runner()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.logger.info(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Sending message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line has-focus"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.plugin.zmq.send(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.encode()) </span></span></code></pre></div></div><h2 id="extend-and-customize" tabindex="-1">Extend and Customize <a class="header-anchor" href="#extend-and-customize" aria-label="Permalink to &quot;Extend and Customize&quot;">​</a></h2><p>But <strong>how do you create an agent</strong> that fits your specific needs?</p><p>Agents are designed to be <strong>extensible</strong> and <strong>customizable</strong>. You can inherit from a built-in agent and override its methods to create your own custom agent.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>You can also <strong>add new methods</strong> to extend the agent’s capabilities.</p></div><p>There are two types of methods you can override:</p><ul><li><a href="#abstract-methods">abstract methods</a>: These methods are required and must be overridden to define the agent’s behavior.</li><li><a href="#template-methods">template methods</a>: These methods are optional and can be overridden to customize the agent’s behavior further.</li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Be sure to call <code>super().method()</code> when overriding to ensure the agent’s core functionality is preserved.</p></div><h3 id="abstract-methods" tabindex="-1">Abstract methods <a class="header-anchor" href="#abstract-methods" aria-label="Permalink to &quot;Abstract methods&quot;">​</a></h3><p>Almost every agent provides <code>@abstractmethod</code> that you need to override to define the agent’s behavior. These methods are where you implement the logic that makes your agent unique.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>In the example we made before, we are inheriting from <code>PeriodicProcessAgent</code>.</p><p>This means we must override the <code>runner</code> method, which is an <code>@abstractmethod</code>, as mentioned in the <a href="./.html">PeriodicAgent</a> documentation.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark has-focused-lines vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PeriodicProcessAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;Agent Class that logs a message periodically.&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PeriodicProcessAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;&quot;&quot;Agent Configuration class.&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        limit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        execution_interval </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        output_directory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;output&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        Setup method for the agent.</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().setup()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.logger.info(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;FileWriter </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> initialized. pid=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.pid</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line has-focus"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> runner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self): </span></span>
<span class="line has-focus"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;&quot;&quot;</span></span>
<span class="line has-focus"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        Runner method for the agent.</span></span>
<span class="line has-focus"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;&quot;&quot;</span></span>
<span class="line has-focus"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.logger.info(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Doing some work&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span></code></pre></div></div><h3 id="template-methods" tabindex="-1">Template methods <a class="header-anchor" href="#template-methods" aria-label="Permalink to &quot;Template methods&quot;">​</a></h3><p>Other methods are <strong>optional</strong> and can be overridden to customize the agent’s behavior further. They will be marked as <code>@templatemethod</code> in the agent’s documentation.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>In the example we made before, we are inheriting from <code>PeriodicAgent</code>.</p><p>This means we can override the <code>setup</code> method, which is a <code>@templatemethod</code>, ensuring we call <code>super().setup()</code> at the beginning, as mentioned in the <a href="./.html">PeriodicAgent</a> documentation.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark has-focused-lines vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PeriodicProcessAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;Agent Class that logs a message periodically.&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PeriodicProcessAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;&quot;&quot;Agent Configuration class.&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        limit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        execution_interval </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        output_directory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;output&quot;</span></span>
<span class="line"></span>
<span class="line has-focus"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self): </span></span>
<span class="line has-focus"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;&quot;&quot;</span></span>
<span class="line has-focus"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        Setup method for the agent.</span></span>
<span class="line has-focus"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;&quot;&quot;</span></span>
<span class="line has-focus"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().setup() </span></span>
<span class="line has-focus"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.logger.info(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;FileWriter </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> initialized. pid=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.pid</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> runner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        Runner method for the agent.</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.logger.info(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Doing some work&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></div><h2 id="hierarchical-structure" tabindex="-1">Hierarchical Structure <a class="header-anchor" href="#hierarchical-structure" aria-label="Permalink to &quot;Hierarchical Structure&quot;">​</a></h2><p>All user-defined agent must inherit first from the <code>BaseAgent</code> class or any of its subclasses (<a href="./built-in-agents/baseagent.html">built-in agents</a>).</p><p>Keep in mind that <strong>higher-level agents</strong> (bottom) come with more built-in functionality but are less customizable, while <strong>lower-level agents</strong> (top) require more work but give you more control.</p><p>The challenge is finding the highest-level agent that best fits your needs.</p>`,54)),(e(),n(l,null,{default:i(()=>[h(a,{id:"mermaid-274",class:"mermaid my-class",graph:"graph%20TD%0A%20%20%20%20BaseAgent%20--%3E%20LoopingAgent%0A%20%20%20%20BaseAgent%20--%3E%20OneShotAgent%0A%20%20%20%20OneShotAgent%20--%3E%20RecoveryAgent%0A%20%20%20%20OneShotAgent%20--%3E%20TriggeredAgent%0A%20%20%20%20OneShotAgent%20--%3E%20ConditionalAgent%0A%20%20%20%20OneShotAgent%20--%3E%20DeferredAgent%0A%20%20%20%20LoopingAgent%20--%3E%20PeriodicAgent%0A%20%20%20%20LoopingAgent%20--%3E%20EventDrivenAgent%0A%20%20%20%20PeriodicAgent%20--%3E%20PoolAgent%0A"})]),fallback:i(()=>s[0]||(s[0]=[o(" Loading... ")])),_:1})),s[3]||(s[3]=t("<p>The hierarchical structure you see above represents only the <strong>behavior</strong> of an agent. Then you have the <strong>execution mode</strong> of an agent, which can be either a <strong>thread</strong> or a <strong>process</strong>.</p><p>For example, <code>LoopingAgent</code> can be either a <code>LoopingThreadAgent</code> or a <code>LoopingProcessAgent</code>.</p>",2)),(e(),n(l,null,{default:i(()=>[h(a,{id:"mermaid-281",class:"mermaid my-class",graph:"graph%20TD%0A%20%20%20%20LoopingAgent%20--%3E%20LoopingThreadAgent%0A%20%20%20%20LoopingAgent%20--%3E%20LoopingProcessAgent%0A"})]),fallback:i(()=>s[1]||(s[1]=[o(" Loading... ")])),_:1})),s[4]||(s[4]=t(`<div class="tip custom-block"><p class="custom-block-title">TIP</p><p>In the example we made before, <code>MyAgent</code> class inherits from <code>PeriodicProcessAgent</code>. This means that <code>MyAgent</code> will have the behavior of a <code>PeriodicAgent</code> and the execution mode of a <code>Process</code>.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark has-focused-lines vp-code" tabindex="0"><code><span class="line has-focus"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PeriodicProcessAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;Agent Class that logs a message periodically.&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PeriodicProcessAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;&quot;&quot;Agent Configuration class.&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        limit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        execution_interval </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        output_directory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;output&quot;</span></span></code></pre></div></div><h2 id="baseagent" tabindex="-1">BaseAgent <a class="header-anchor" href="#baseagent" aria-label="Permalink to &quot;BaseAgent&quot;">​</a></h2><p>The <code>BaseAgent</code> class is the foundation for all agents in PyOrchestrate. It provides the basic structure and functionality that all agents inherit.</p><p>Click <a href="./built-in-agents/baseagent.html">here</a> to learn more about the <code>BaseAgent</code>.</p>`,4))])}const A=p(E,[["render",y]]);export{q as __pageData,A as default};
