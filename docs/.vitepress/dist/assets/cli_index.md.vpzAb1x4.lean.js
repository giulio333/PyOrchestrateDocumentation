import{_ as n,c as o,a2 as s,b as r,w as t,a3 as l,B as h,o as i,G as p,a as c}from"./chunks/framework.BkvI1e0W.js";const F=JSON.parse('{"title":"CLI Overview","description":"","frontmatter":{"title":"CLI Overview","editLink":true},"headers":[],"relativePath":"cli/index.md","filePath":"cli/index.md","lastUpdated":1761471006000}'),d={name:"cli/index.md"};function k(g,a,m,u,y,b){const e=h("Mermaid");return i(),o("div",null,[a[1]||(a[1]=s(`<h1 id="pyorchestrate-cli" tabindex="-1">PyOrchestrate CLI <a class="header-anchor" href="#pyorchestrate-cli" aria-label="Permalink to &quot;PyOrchestrate CLI&quot;">​</a></h1><p>The PyOrchestrate Command Line Interface (CLI) provides powerful tools for managing and interacting with your orchestrator and agents both during development and at runtime.</p><p>The CLI offers two main categories of functionality:</p><h2 id="project-management-commands" tabindex="-1">Project Management Commands <a class="header-anchor" href="#project-management-commands" aria-label="Permalink to &quot;Project Management Commands&quot;">​</a></h2><p>Basic commands for project initialization and setup:</p><ul><li><strong>Project creation</strong>: <code>create</code> - Bootstrap new PyOrchestrate projects with proper structure</li><li><strong>Version information</strong>: <code>--version</code> - Display CLI version information</li></ul><h2 id="runtime-commands" tabindex="-1">Runtime Commands <a class="header-anchor" href="#runtime-commands" aria-label="Permalink to &quot;Runtime Commands&quot;">​</a></h2><p>Advanced commands for real-time control of running orchestrators:</p><ul><li><strong>Agent monitoring</strong>: <code>ps</code> - View status and statistics of running agents</li><li><strong>Dynamic control</strong>: <code>start</code>/<code>stop</code> - Start, stop, and manage agents on-demand</li><li><strong>System inspection</strong>: <code>status</code> - Get detailed reports for orchestrator or specific agents</li><li><strong>Dependencies</strong>: <code>dependencies</code> - Show agent dependency graph</li><li><strong>Event tracking</strong>: <code>history</code>/<code>history-stats</code> - Get event history and statistics</li><li><strong>Real-time monitoring</strong>: <code>stats</code> - Continuous monitoring like <code>docker stats</code></li><li><strong>Remote management</strong>: <code>shutdown</code> - Gracefully shutdown orchestrator via UNIX sockets</li></ul><h2 id="web-interface" tabindex="-1">Web Interface <a class="header-anchor" href="#web-interface" aria-label="Permalink to &quot;Web Interface&quot;">​</a></h2><p>PyOrchestrate also provides a web-based interface for monitoring and controlling your orchestrator:</p><ul><li><strong>Web dashboard</strong>: <code>pyorchestrate-web</code> - Launch a web interface for visual monitoring and control</li><li><strong>Real-time updates</strong>: Live dashboard with agent status, statistics, and logs</li><li><strong>Authentication</strong>: Optional token-based authentication for secure access</li><li><strong>Remote access</strong>: Web-based alternative to CLI commands</li></ul><h3 id="output-formats" tabindex="-1">Output Formats <a class="header-anchor" href="#output-formats" aria-label="Permalink to &quot;Output Formats&quot;">​</a></h3><p>All runtime commands support two output formats:</p><ul><li><strong>Table format</strong> (<code>--format table</code>): Human-readable output with formatted tables (default)</li><li><strong>JSON format</strong> (<code>--format json</code>): Machine-readable structured output for automation</li></ul><div class="tip custom-block"><p class="custom-block-title">Real-time Control</p><p>The runtime commands enable DevOps workflows, monitoring integration, and dynamic agent management without stopping your orchestrator.</p></div><h2 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-label="Permalink to &quot;Installation&quot;">​</a></h2><p>The CLI is automatically installed when you install PyOrchestrate:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre></div><p>Verify the installation:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pyorchestrate</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --help</span></span></code></pre></div><h2 id="getting-started" tabindex="-1">Getting Started <a class="header-anchor" href="#getting-started" aria-label="Permalink to &quot;Getting Started&quot;">​</a></h2><h3 id="basic-usage" tabindex="-1">Basic Usage <a class="header-anchor" href="#basic-usage" aria-label="Permalink to &quot;Basic Usage&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Initialize a new project</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pyorchestrate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-project</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Show CLI help</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pyorchestrate</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --help</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Show WebServer help</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pyorchestrate-web</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --help</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Start web interface</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pyorchestrate-web</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --host</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.0.0.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --port</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8080</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --socket</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp/pyorchestrate.sock</span></span></code></pre></div><h3 id="runtime-control" tabindex="-1">Runtime Control <a class="header-anchor" href="#runtime-control" aria-label="Permalink to &quot;Runtime Control&quot;">​</a></h3><p>To use runtime commands, your orchestrator must be configured with the command interface enabled:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># In your orchestrator configuration</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Orchestrator.Config(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    enable_command_interface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    command_socket_path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/tmp/pyorchestrate.sock&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Then you can control the running orchestrator:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># List all agents and their status</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pyorchestrate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ps</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Get orchestrator statistics (real-time monitoring)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pyorchestrate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stats</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Start a specific agent</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pyorchestrate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MyAgent</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Get event history</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pyorchestrate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> history</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --last</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Shutdown orchestrator</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pyorchestrate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> shutdown</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Start web interface for visual monitoring</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pyorchestrate-web</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --port</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8080</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --socket</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp/pyorchestrate.sock</span></span></code></pre></div><h2 id="architecture" tabindex="-1">Architecture <a class="header-anchor" href="#architecture" aria-label="Permalink to &quot;Architecture&quot;">​</a></h2><p>The CLI consists of two main components:</p><h3 id="_1-direct-commands" tabindex="-1">1. Direct Commands <a class="header-anchor" href="#_1-direct-commands" aria-label="Permalink to &quot;1. Direct Commands&quot;">​</a></h3><p>Commands that operate on project files and configurations without requiring a running orchestrator.</p><h3 id="_2-socket-based-commands" tabindex="-1">2. Socket-based Commands <a class="header-anchor" href="#_2-socket-based-commands" aria-label="Permalink to &quot;2. Socket-based Commands&quot;">​</a></h3><p>Commands that communicate with a running orchestrator via UNIX sockets, enabling real-time control and monitoring.</p>`,35)),(i(),r(l,null,{default:t(()=>[p(e,{id:"mermaid-168",class:"mermaid my-class",graph:"graph%20TD%0A%20%20%20%20A%5BCLI%20Client%5D%20--%3E%20B%7BCommand%20Type%7D%0A%20%20%20%20A1%5BWeb%20Interface%5D%20--%3E%20B%0A%20%20%20%20B%20--%3E%7CDirect%7C%20C%5BProject%20Files%5D%0A%20%20%20%20B%20--%3E%7CRuntime%7C%20D%5BUNIX%20Socket%5D%0A%20%20%20%20D%20--%3E%20E%5BRunning%20Orchestrator%5D%0A%20%20%20%20E%20--%3E%20F%5BAgent%20Manager%5D%0A%20%20%20%20E%20--%3E%20G%5BStatistics%20Engine%5D%0A%20%20%20%20E%20--%3E%20H%5BCommand%20Handler%5D%0A%20%20%20%20A1%20--%3E%20I%5BWeb%20Dashboard%5D%0A%20%20%20%20I%20--%3E%20J%5BReal-time%20Updates%5D%0A%20%20%20%20I%20--%3E%20K%5BAgent%20Control%5D%0A"})]),fallback:t(()=>a[0]||(a[0]=[c(" Loading... ")])),_:1})),a[2]||(a[2]=s('<h2 id="security-considerations" tabindex="-1">Security Considerations <a class="header-anchor" href="#security-considerations" aria-label="Permalink to &quot;Security Considerations&quot;">​</a></h2><ul><li><strong>UNIX Sockets</strong>: Provide secure local communication with file-based permissions</li><li><strong>Command Validation</strong>: All commands are validated before execution</li><li><strong>Access Control</strong>: Socket permissions can be configured for multi-user environments</li><li><strong>Audit Logging</strong>: All CLI commands are logged for security monitoring</li></ul><h2 id="next-steps" tabindex="-1">Next Steps <a class="header-anchor" href="#next-steps" aria-label="Permalink to &quot;Next Steps&quot;">​</a></h2><ul><li>Learn about <a href="./runtime-commands.html">Runtime Commands</a> for real-time orchestrator control</li><li>Explore <a href="./web-interface.html">Web Interface</a> for browser-based monitoring and control</li><li>Check <a href="./configuration.html">Configuration</a> options for the command interface</li><li>See practical <a href="./examples.html">Examples</a> of CLI usage in different scenarios</li></ul><p>The PyOrchestrate CLI bridges the gap between development and operations, providing both developer-friendly tools and production-ready management capabilities.</p>',5))])}const f=n(d,[["render",k]]);export{F as __pageData,f as default};
