import{_ as r,c as d,a2 as l,b as h,w as a,a3 as o,j as i,a as e,B as c,o as t,G as p}from"./chunks/framework.BkvI1e0W.js";const b=JSON.parse('{"title":"PeriodicAgent","description":"","frontmatter":{"title":"PeriodicAgent"},"headers":[],"relativePath":"learn/agents/built-in-agents/periodicagent.md","filePath":"learn/agents/built-in-agents/periodicagent.md","lastUpdated":1761471006000}'),k={name:"learn/agents/built-in-agents/periodicagent.md"};function g(u,s,E,y,m,F){const n=c("Mermaid");return t(),d("div",null,[s[2]||(s[2]=l(`<h1 id="periodicagent" tabindex="-1">PeriodicAgent <a class="header-anchor" href="#periodicagent" aria-label="Permalink to &quot;PeriodicAgent&quot;">â€‹</a></h1><p>The <strong>PeriodicAgent</strong> is basically a <code>LoopingAgent</code> that executes its core logic at fixed and regular intervals. It is ideal for implementing custom logic that needs to be executed periodically with precise timing.</p><p>It provides a built-in timing mechanism that automatically controls the execution frequency, with options for delay compensation.</p><h2 id="why-use-periodicagent" tabindex="-1">Why use PeriodicAgent? <a class="header-anchor" href="#why-use-periodicagent" aria-label="Permalink to &quot;Why use PeriodicAgent?&quot;">â€‹</a></h2><p>The PeriodicAgent is ideal for developers who need an efficient, <strong>thread-safe mechanism</strong> to execute repetitive tasks at regular intervals. Whether running as a process or a thread, it employs appropriate event controls to manage execution reliably. It supports both <strong>finite</strong> and <strong>infinite loops</strong>, and you can always use the <code>stop</code> method to halt the agent safely.</p><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">â€‹</a></h2><p>You can create a custom <code>PeriodicAgent</code> by inheriting from the <code>PeriodicProcessAgent</code> or <code>PeriodicThreadAgent</code> class.</p><table tabindex="0"><thead><tr><th>Method</th><th>Description</th><th>Override</th></tr></thead><tbody><tr><td><a href="#runner">runner</a></td><td>Implement the repeated logic of the agent.</td><td>Required ðŸŸ¢</td></tr><tr><td><a href="#setup">setup</a></td><td>Perform any setup operations required by the agent.</td><td>Optional ðŸŸ </td></tr><tr><td><a href="#on-stop">on_stop</a></td><td>Implement custom logic during external shutdown request.</td><td>Optional ðŸŸ </td></tr><tr><td><a href="#on-close">on_close</a></td><td>Implement custom logic during the agent&#39;s shutdown.</td><td>Optional ðŸŸ </td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">Important</p><p>Make sure to call the parent method <strong>for each overridden</strong> method.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CustomAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PeriodicProcessAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line highlighted"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().setup()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # Custom setup logic</span></span></code></pre></div></div><h2 id="inheritance" tabindex="-1">Inheritance <a class="header-anchor" href="#inheritance" aria-label="Permalink to &quot;Inheritance&quot;">â€‹</a></h2><p>The <code>PeriodicProcessAgent</code> and <code>PeriodicThreadAgent</code> classes inherit from the <code>PeriodicAgent</code> class.</p><p>This is the shared structure of both classes.</p>`,12)),(t(),h(o,null,{default:a(()=>[p(n,{id:"mermaid-97",class:"mermaid my-class",graph:"classDiagram%0A%20%20%20%20class%20LoopingAgent%20%7B%0A%20%20%20%20%7D%0A%0A%20%20%20%20class%20PeriodicAgent%20%7B%0A%20%20%20%20%20%20%20%20%2Bexecute()%0A%20%20%20%20%20%20%20%20%2Bsetup()%0A%20%20%20%20%20%20%20%20%2Bcycle()%0A%20%20%20%20%20%20%20%20%2Brunner()%0A%20%20%20%20%20%20%20%20%2Btimer%3A%20PeriodicTimer%0A%20%20%20%20%7D%0A%0A%20%20%20%20class%20PeriodicProcessAgent%20%7B%0A%20%20%20%20%7D%0A%20%20%20%20class%20PeriodicThreadAgent%20%7B%0A%20%20%20%20%7D%0A%0A%20%20%20%20LoopingAgent%20%3C%7C--%20PeriodicAgent%0A%20%20%20%20PeriodicAgent%20%3C%7C--%20PeriodicProcessAgent%0A%20%20%20%20PeriodicAgent%20%3C%7C--%20PeriodicThreadAgent%0A"})]),fallback:a(()=>s[0]||(s[0]=[e(" Loading... ")])),_:1})),s[3]||(s[3]=i("p",null,[e("To learn more about "),i("code",null,"LoopingAgent"),e(" click "),i("a",{href:"./loopingagent.html"},"here"),e(".")],-1)),s[4]||(s[4]=i("h2",{id:"sequence-diagram",tabindex:"-1"},[e("Sequence Diagram "),i("a",{class:"header-anchor",href:"#sequence-diagram","aria-label":'Permalink to "Sequence Diagram"'},"â€‹")],-1)),s[5]||(s[5]=i("p",null,[e("The sequence diagram below illustrates the lifecycle of the "),i("code",null,"PeriodicAgent"),e(" after it is started.")],-1)),(t(),h(o,null,{default:a(()=>[p(n,{id:"mermaid-107",class:"mermaid my-class",graph:"sequenceDiagram%0A%20%20%20%20participant%20Agent%20as%20PeriodicAgent%0A%20%20%20%20participant%20Config%20as%20Config%0A%20%20%20%20participant%20StateEvents%20as%20StateEvents%0A%20%20%20%20participant%20ControlEvents%20as%20ControlEvents%0A%20%20%20%20participant%20MessageChannel%20as%20MessageChannel%0A%20%20%20%20participant%20Orchestrator%20as%20Orchestrator%0A%20%20%20%20participant%20Timer%20as%20PeriodicTimer%0A%0A%20%20%20%20Agent-%3E%3EMessageChannel%3A%20send(AGENT_START)%0A%20%20%20%20MessageChannel-%3E%3EOrchestrator%3A%20forward%20message%0A%20%20%20%20Agent-%3E%3EConfig%3A%20validate_config()%0A%20%20%20%20Agent-%3E%3EControlEvents%3A%20setup_event.wait()%0A%20%20%20%20activate%20ControlEvents%0A%20%20%20%20ControlEvents--%3E%3EAgent%3A%20control%20event%20triggered%0A%20%20%20%20deactivate%20ControlEvents%0A%20%20%20%20Agent-%3E%3EAgent%3A%20setup()%0A%20%20%20%20Agent-%3E%3ETimer%3A%20initialize%20PeriodicTimer%0A%20%20%20%20Agent-%3E%3EMessageChannel%3A%20send(AGENT_SETUP)%0A%20%20%20%20MessageChannel-%3E%3EOrchestrator%3A%20forward%20message%0A%20%20%20%20Agent-%3E%3EStateEvents%3A%20ready_event.set()%0A%20%20%20%20Agent-%3E%3EControlEvents%3A%20execute_event.wait()%0A%20%20%20%20activate%20ControlEvents%0A%20%20%20%20ControlEvents--%3E%3EAgent%3A%20control%20event%20triggered%0A%20%20%20%20deactivate%20ControlEvents%0A%20%20%20%20Agent-%3E%3EAgent%3A%20execute()%0A%20%20%20%20loop%0A%20%20%20%20%20%20%20%20Agent-%3E%3EAgent%3A%20cycle()%0A%20%20%20%20%20%20%20%20Agent-%3E%3EAgent%3A%20runner()%0A%20%20%20%20%20%20%20%20Agent-%3E%3ETimer%3A%20wait(stop_event)%0A%20%20%20%20%20%20%20%20Timer--%3E%3EAgent%3A%20interval%20elapsed%20or%20stop%20requested%0A%20%20%20%20end%0A%20%20%20%20Agent-%3E%3EAgent%3A%20on_close()%0A%20%20%20%20Agent-%3E%3EMessageChannel%3A%20send(AGENT_CLOSE)%0A%20%20%20%20MessageChannel-%3E%3EOrchestrator%3A%20forward%20message%0A%20%20%20%20Agent-%3E%3EStateEvents%3A%20close_event.set()%0A"})]),fallback:a(()=>s[1]||(s[1]=[e(" Loading... ")])),_:1})),s[6]||(s[6]=l(`<h2 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-label="Permalink to &quot;Configuration&quot;">â€‹</a></h2><p>The <code>PeriodicAgent</code> class defines its own configuration object via the <code>Config</code> class.</p><table tabindex="0"><thead><tr><th>Attribute</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>logger_config</td><td><code>LoggerConfig()</code></td><td>Defines configuration for the logger.</td></tr><tr><td>validation_policy</td><td><code>ValidationPolicy()</code></td><td>Defines the validation policy.</td></tr><tr><td>limit</td><td>-1</td><td>The number of times the agent will cycle. A value of -1 means the agent will run indefinitely.</td></tr><tr><td>execution_interval</td><td>1.0</td><td>The interval between two consecutive executions in seconds.</td></tr><tr><td>delay_compensation</td><td>False</td><td>Compensate the delay in the execution to maintain precise intervals.</td></tr></tbody></table><p>To learn more about the configuration object, click <a href="./../#configuration">here</a>.</p><h2 id="use-case" tabindex="-1">Use Case <a class="header-anchor" href="#use-case" aria-label="Permalink to &quot;Use Case&quot;">â€‹</a></h2><p>When you need to create an agent that performs a specific task repeatedly at regular and precise intervals, the <code>PeriodicAgent</code> is the ideal choice. It provides a structure that allows you to focus on the core logic of the agent while automatically handling the timing.</p><h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">â€‹</a></h2><h3 id="run" tabindex="-1">run <a class="header-anchor" href="#run" aria-label="Permalink to &quot;run&quot;">â€‹</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@final</span></span></code></pre></div><p>This is the entry point for all agents, encapsulating their entire lifecycle and handling the low-level execution logic. In essence, the <code>run()</code> method in PeriodicAgent overrides the run method from <code>threading.Thread</code> or <code>multiprocessing.Process</code>.</p><p>It provides <a href="#execute">execute</a> method to be overridden by the derived class to define the core logic of the agent.</p><div class="warning custom-block"><p class="custom-block-title">Do not override</p><p>Marked as <code>@final</code> to prevent overriding in derived class ensuring that the core logic remains consistent across all agents.</p></div><h3 id="setup" tabindex="-1">setup <a class="header-anchor" href="#setup" aria-label="Permalink to &quot;setup&quot;">â€‹</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@template</span></span></code></pre></div><p>This method is called before the agent starts running. It can be overridden to perform any setup operations required by the agent.</p><div class="tip custom-block"><p class="custom-block-title">Control Events</p><p>The setup method waits for the <code>control_events.setup_event</code> to be triggered, giving external systems the ability to manage when the setup phase starts.</p></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Be sure to call the parent method if you override it.</p></div><h3 id="execute" tabindex="-1">execute <a class="header-anchor" href="#execute" aria-label="Permalink to &quot;execute&quot;">â€‹</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@abstractmethod</span></span></code></pre></div><p>This method is called by the <code>run()</code> method to execute the core logic of the agent. It must be overridden by the derived class to define the agent&#39;s behavior.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Be sure to call the parent method.</p></div><h3 id="cycle" tabindex="-1">cycle <a class="header-anchor" href="#cycle" aria-label="Permalink to &quot;cycle&quot;">â€‹</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@final</span></span></code></pre></div><p>This method defines the agent&#39;s work to be done in each iteration of the loop. It calls the <code>runner()</code> method and manages timing through <code>PeriodicTimer</code>.</p><div class="warning custom-block"><p class="custom-block-title">Do not override</p><p>Marked as <code>@final</code> to prevent overriding in derived class. Implement the <a href="#runner">runner</a> method instead.</p></div><h3 id="runner" tabindex="-1">runner <a class="header-anchor" href="#runner" aria-label="Permalink to &quot;runner&quot;">â€‹</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@abstractmethod</span></span></code></pre></div><p>This is the method that must be implemented in derived classes to define the logic that will be executed periodically.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>This is the only method you MUST implement when creating a custom PeriodicAgent.</p></div><h3 id="stop" tabindex="-1">stop <a class="header-anchor" href="#stop" aria-label="Permalink to &quot;stop&quot;">â€‹</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@final</span></span></code></pre></div><p>This method is called to stop the agent from external systems.</p><p>Keep in mind that agents will not stop immediately. They will complete the current iteration of the <code>execute</code> method before stopping.</p><div class="warning custom-block"><p class="custom-block-title">Do not override</p><p>Marked as <code>@final</code> to prevent overriding in derived class ensuring that the core logic remains consistent across all agents.</p></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>To implement custom logic during the agent&#39;s shutdown, override the <a href="#on_stop">on_stop</a> method in your derived class.</p></div><h3 id="on-stop" tabindex="-1">on_stop <a class="header-anchor" href="#on-stop" aria-label="Permalink to &quot;on_stop&quot;">â€‹</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@optional</span></span></code></pre></div><p>This method is called when the agent is stopped. It can be overridden to implement custom logic during the agent&#39;s shutdown.</p><h3 id="on-close" tabindex="-1">on_close <a class="header-anchor" href="#on-close" aria-label="Permalink to &quot;on_close&quot;">â€‹</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@optional</span></span></code></pre></div><p>This method is called when the agent is closed. It can be overridden to implement custom logic during the agent&#39;s shutdown.</p><h2 id="attributes" tabindex="-1">Attributes <a class="header-anchor" href="#attributes" aria-label="Permalink to &quot;Attributes&quot;">â€‹</a></h2><h3 id="logger" tabindex="-1">Logger <a class="header-anchor" href="#logger" aria-label="Permalink to &quot;Logger&quot;">â€‹</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">logger: Logger</span></span></code></pre></div><p>The logger object for the agent. Available levels are <code>DEBUG</code>, <code>INFO</code>, <code>SUCCESS</code>, <code>WARNING</code>, <code>ERROR</code>, and <code>CRITICAL</code>.</p><h3 id="state-events" tabindex="-1">State Events <a class="header-anchor" href="#state-events" aria-label="Permalink to &quot;State Events&quot;">â€‹</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">state_events: PeriodicAgent.StateEvents</span></span></code></pre></div><p>The state events object for the agent.</p><h3 id="control-events" tabindex="-1">Control Events <a class="header-anchor" href="#control-events" aria-label="Permalink to &quot;Control Events&quot;">â€‹</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">control_events: PeriodicAgent.ControlEvents</span></span></code></pre></div><p>The control events object for the agent.</p><h3 id="config" tabindex="-1">Config <a class="header-anchor" href="#config" aria-label="Permalink to &quot;Config&quot;">â€‹</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config: PeriodicAgent.Config</span></span></code></pre></div><p>The configuration object for the agent.</p><h3 id="timer" tabindex="-1">Timer <a class="header-anchor" href="#timer" aria-label="Permalink to &quot;Timer&quot;">â€‹</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">timer: PeriodicTimer</span></span></code></pre></div><p>The periodic timer object that manages execution intervals and delay compensation.</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">â€‹</a></h2><p>In this example, we create a custom agent that periodically monitors the system&#39;s CPU usage.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> psutil</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PyOrchestrate.core.agent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PeriodicProcessAgent</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CPUMonitorAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PeriodicProcessAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PeriodicProcessAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        execution_interval: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">float</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5.0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Check every 5 seconds</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        delay_compensation: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> True</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # Compensate delays</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cpu_threshold: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">float</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 80.0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       # CPU alarm threshold</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    config: Config</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        Initialize CPU monitoring.</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().setup()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.logger.info(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;CPUMonitorAgent initialized&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.logger.info(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;CPU threshold: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.config.cpu_threshold</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">%&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.logger.info(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Check interval: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.config.execution_interval</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">s&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> runner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        Monitor CPU usage and generate alarms if necessary.</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            cpu_percent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> psutil.cpu_percent(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">interval</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.logger.info(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;CPU usage: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cpu_percent</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">%&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cpu_percent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.config.cpu_threshold:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.logger.warning(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;High CPU usage detected: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cpu_percent</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">% &quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;(threshold: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.config.cpu_threshold</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">%)&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                )</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.logger.debug(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;CPU usage normal&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        except</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Exception</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.logger.error(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Error during CPU monitoring: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> on_close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        Log the agent&#39;s shutdown.</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().on_close()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.logger.info(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;CPUMonitorAgent stopped.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="advanced-usage" tabindex="-1">Advanced Usage <a class="header-anchor" href="#advanced-usage" aria-label="Permalink to &quot;Advanced Usage&quot;">â€‹</a></h2><p>For a deeper dive into how agents work and their advanced use cases, explore the <strong>Advanced Insights section</strong>.</p>`,62))])}const v=r(k,[["render",g]]);export{b as __pageData,v as default};
