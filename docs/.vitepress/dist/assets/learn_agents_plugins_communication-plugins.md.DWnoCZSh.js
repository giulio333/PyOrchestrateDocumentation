import{_ as s,c as a,a2 as n,o as t}from"./chunks/framework.BkvI1e0W.js";const g=JSON.parse('{"title":"Communication Plugins","description":"","frontmatter":{},"headers":[],"relativePath":"learn/agents/plugins/communication-plugins.md","filePath":"learn/agents/plugins/communication-plugins.md","lastUpdated":1761471006000}'),l={name:"learn/agents/plugins/communication-plugins.md"};function e(h,i,p,k,o,r){return t(),a("div",null,i[0]||(i[0]=[n(`<h1 id="communication-plugins" tabindex="-1">Communication Plugins <a class="header-anchor" href="#communication-plugins" aria-label="Permalink to &quot;Communication Plugins&quot;">​</a></h1><p>Communication plugins in PyOrchestrate allow agents to interact with other agents, external systems, and more.</p><h2 id="using-communication-plugins-automatic-vs-manual-management" tabindex="-1">Using Communication Plugins: Automatic vs Manual Management <a class="header-anchor" href="#using-communication-plugins-automatic-vs-manual-management" aria-label="Permalink to &quot;Using Communication Plugins: Automatic vs Manual Management&quot;">​</a></h2><p>PyOrchestrate provides two main ways to use communication plugins in your agents:</p><h3 id="_1-automatic-initialization-finalization-recommended" tabindex="-1">1. Automatic Initialization/Finalization (Recommended) <a class="header-anchor" href="#_1-automatic-initialization-finalization-recommended" aria-label="Permalink to &quot;1. Automatic Initialization/Finalization (Recommended)&quot;">​</a></h3><p>By defining your plugins inside the <code>Plugin</code> inner class of your agent, PyOrchestrate will automatically handle their initialization and finalization during the agent&#39;s lifecycle. This is the recommended approach for most use cases.</p><p><strong>Example:</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PyOrchestrate.core.agent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BaseProcessAgent</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PyOrchestrate.core.plugins </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ZeroMQPubSub</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> zmq</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BaseProcessAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BaseProcessAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        zmq </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ZeroMQPubSub(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tcp://localhost:5555&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, zmq.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PUB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    plugin: Plugin</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().execute()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.plugin.zmq.send(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, World!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.encode())</span></span></code></pre></div><hr><h3 id="_2-manual-initialization-finalization" tabindex="-1">2. Manual Initialization/Finalization <a class="header-anchor" href="#_2-manual-initialization-finalization" aria-label="Permalink to &quot;2. Manual Initialization/Finalization&quot;">​</a></h3><p>Alternatively, you can instantiate plugins directly in your agent (outside the <code>Plugin</code> class). In this case, you are responsible for manually initializing and finalizing the plugin.</p><p><strong>Example:</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PyOrchestrate.core.agent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BaseProcessAgent</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PyOrchestrate.core.plugins </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ZeroMQPubSub</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> zmq</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BaseProcessAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.zmq </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ZeroMQPubSub(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tcp://localhost:5555&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, zmq.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PUB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.zmq.initialize()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Manual initialization</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().execute()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.zmq.send(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, World!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.encode())</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> on_close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().on_close()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.zmq.finalize()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Manual finalization</span></span></code></pre></div><p><strong>Notes:</strong></p><ul><li>You must call <code>initialize()</code> on the plugin before using it.</li><li>You must call <code>finalize()</code> on the plugin when the agent is shutting down.</li><li>Resource management is your responsibility.</li></ul><hr><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Automatic management via the <code>Plugin</code> class is recommended for most scenarios. Manual management is useful for advanced or custom setups where you need more control over plugin lifecycle.</p></div>`,17)]))}const c=s(l,[["render",e]]);export{g as __pageData,c as default};
