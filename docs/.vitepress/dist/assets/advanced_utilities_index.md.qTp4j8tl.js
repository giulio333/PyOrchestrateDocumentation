import{_ as h,c,a2 as s,b as n,w as a,a3 as l,B as p,o as t,G as r,a as o}from"./chunks/framework.BkvI1e0W.js";const E=JSON.parse('{"title":"Core Utilities","description":"","frontmatter":{"title":"Core Utilities","editLink":true},"headers":[],"relativePath":"advanced/utilities/index.md","filePath":"advanced/utilities/index.md","lastUpdated":1761471006000}'),d={name:"advanced/utilities/index.md"};function g(u,e,k,m,y,f){const i=p("Mermaid");return t(),c("div",null,[e[2]||(e[2]=s('<h1 id="core-utilities" tabindex="-1">Core Utilities <a class="header-anchor" href="#core-utilities" aria-label="Permalink to &quot;Core Utilities&quot;">​</a></h1><p>This section documents the <strong>low-level utility components</strong> of PyOrchestrate that provide foundational infrastructure for the framework. These utilities are used internally by higher-level components like the orchestrator managers and agents.</p><div class="tip custom-block"><p class="custom-block-title">Understanding the Architecture</p><p>These utilities are <strong>building blocks</strong> used by the framework&#39;s higher-level components. If you&#39;re learning about orchestrator internals, see the <a href="./../orchestrator-internals/">Orchestrator Internals</a> section to understand how these utilities are composed into specialized managers.</p></div><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>PyOrchestrate&#39;s utility layer provides three core low-level components:</p><table tabindex="0"><thead><tr><th>Utility</th><th>Purpose</th><th>Used By</th></tr></thead><tbody><tr><td><strong><a href="./event-manager.html">EventManager</a></strong></td><td>Callback-based event system</td><td>OrchestratorEventBus</td></tr><tr><td><strong><a href="./plugin-manager.html">PluginManager</a></strong></td><td>Plugin lifecycle management</td><td>AgentLifecycleManager, Agents</td></tr><tr><td><strong><a href="./message-channel.html">MessageChannel</a></strong></td><td>Inter-process communication</td><td>MessageRouter, CommandInterface</td></tr></tbody></table><h2 id="architectural-context" tabindex="-1">Architectural Context <a class="header-anchor" href="#architectural-context" aria-label="Permalink to &quot;Architectural Context&quot;">​</a></h2><h3 id="how-utilities-fit-into-the-framework" tabindex="-1">How Utilities Fit Into the Framework <a class="header-anchor" href="#how-utilities-fit-into-the-framework" aria-label="Permalink to &quot;How Utilities Fit Into the Framework&quot;">​</a></h3>',8)),(t(),n(l,null,{default:a(()=>[r(i,{id:"mermaid-73",class:"mermaid my-class",graph:"graph%20TD%0A%20%20%20%20subgraph%20%22High-Level%20Components%22%0A%20%20%20%20%20%20%20%20OEB%5BOrchestratorEventBus%5D%0A%20%20%20%20%20%20%20%20ALM%5BAgentLifecycleManager%5D%0A%20%20%20%20%20%20%20%20MR%5BMessageRouter%5D%0A%20%20%20%20%20%20%20%20CI%5BCommandInterface%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20subgraph%20%22Low-Level%20Utilities%22%0A%20%20%20%20%20%20%20%20EM%5BEventManager%5D%0A%20%20%20%20%20%20%20%20PM%5BPluginManager%5D%0A%20%20%20%20%20%20%20%20MC%5BMessageChannel%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20OEB%20--%3E%7Cuses%7C%20EM%0A%20%20%20%20ALM%20--%3E%7Cuses%7C%20PM%0A%20%20%20%20MR%20--%3E%7Cuses%7C%20MC%0A%20%20%20%20CI%20--%3E%7Cuses%7C%20MC%0A%20%20%20%20%0A%20%20%20%20style%20OEB%20fill%3A%23e1f5ff%0A%20%20%20%20style%20ALM%20fill%3A%23e1f5ff%0A%20%20%20%20style%20MR%20fill%3A%23e1f5ff%0A%20%20%20%20style%20CI%20fill%3A%23e1f5ff%0A%20%20%20%20style%20EM%20fill%3A%23fff4e1%0A%20%20%20%20style%20PM%20fill%3A%23fff4e1%0A%20%20%20%20style%20MC%20fill%3A%23fff4e1%0A"})]),fallback:a(()=>e[0]||(e[0]=[o(" Loading... ")])),_:1})),e[3]||(e[3]=s(`<div class="tip custom-block"><p class="custom-block-title">Key Principle</p><p>You typically interact with <strong>high-level managers</strong> (blue), which internally use these <strong>low-level utilities</strong> (yellow).</p></div><h2 id="available-utilities" tabindex="-1">Available Utilities <a class="header-anchor" href="#available-utilities" aria-label="Permalink to &quot;Available Utilities&quot;">​</a></h2><h3 id="event-manager" tabindex="-1"><a href="./event-manager.html">Event Manager</a> <a class="header-anchor" href="#event-manager" aria-label="Permalink to &quot;[Event Manager](./event-manager.md)&quot;">​</a></h3><p>The Event Manager provides a callback-based event notification system. It&#39;s used internally by <code>OrchestratorEventBus</code> to execute registered callbacks when events occur.</p><p><strong>Key Features</strong>:</p><ul><li>Event callback registration and execution</li><li>Asynchronous callback execution via thread pool</li><li>Parameter filtering based on callback signatures</li><li>Error isolation between callbacks</li></ul><p><strong>Used By</strong>: OrchestratorEventBus (combines EventManager + EventStore)</p><h3 id="plugin-manager" tabindex="-1"><a href="./plugin-manager.html">Plugin Manager</a> <a class="header-anchor" href="#plugin-manager" aria-label="Permalink to &quot;[Plugin Manager](./plugin-manager.md)&quot;">​</a></h3><p>The Plugin Manager handles plugin lifecycle operations including initialization, finalization, and owner reference management.</p><p><strong>Key Features</strong>:</p><ul><li>Plugin discovery and extraction</li><li>Plugin initialization and finalization</li><li>Owner reference management</li><li>Hierarchical plugin definition support</li></ul><p><strong>Used By</strong>: AgentLifecycleManager (for agent plugin management), BaseAgent, BaseOrchestrator</p><h3 id="message-channel" tabindex="-1"><a href="./message-channel.html">Message Channel</a> <a class="header-anchor" href="#message-channel" aria-label="Permalink to &quot;[Message Channel](./message-channel.md)&quot;">​</a></h3><p>The Message Channel provides process-safe message passing between framework components using structured message envelopes.</p><p><strong>Key Features</strong>:</p><ul><li>Process-safe communication (ZeroMQ-based)</li><li>Structured message format (COMMAND, STATUS)</li><li>Request/response correlation</li><li>Transport abstraction</li></ul><p><strong>Used By</strong>: MessageRouter (agent→orchestrator), CommandInterface (CLI→orchestrator)</p><h2 id="when-to-use-these-utilities-directly" tabindex="-1">When to Use These Utilities Directly <a class="header-anchor" href="#when-to-use-these-utilities-directly" aria-label="Permalink to &quot;When to Use These Utilities Directly&quot;">​</a></h2><h3 id="typical-use-indirect" tabindex="-1">Typical Use (Indirect) <a class="header-anchor" href="#typical-use-indirect" aria-label="Permalink to &quot;Typical Use (Indirect)&quot;">​</a></h3><p>Most users interact with these utilities <strong>indirectly</strong> through higher-level APIs:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># You use high-level APIs</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator.event_bus.register_callback(event, callback)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Uses EventManager internally</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator.register_agent(MyAgent, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;worker&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)             </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Uses PluginManager internally</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># The framework handles the low-level utilities</span></span></code></pre></div><h3 id="advanced-use-direct" tabindex="-1">Advanced Use (Direct) <a class="header-anchor" href="#advanced-use-direct" aria-label="Permalink to &quot;Advanced Use (Direct)&quot;">​</a></h3><p>You might use these utilities directly when:</p><ol><li><strong>Building Custom Components</strong>: Extending the framework with custom managers or agents</li><li><strong>Plugin Development</strong>: Creating custom plugins that need lifecycle management</li><li><strong>Testing</strong>: Unit testing framework components with mocked utilities</li><li><strong>Debugging</strong>: Inspecting internal framework behavior</li></ol><h2 id="integration-patterns" tabindex="-1">Integration Patterns <a class="header-anchor" href="#integration-patterns" aria-label="Permalink to &quot;Integration Patterns&quot;">​</a></h2><h3 id="agents-automatically-use-utilities" tabindex="-1">Agents Automatically Use Utilities <a class="header-anchor" href="#agents-automatically-use-utilities" aria-label="Permalink to &quot;Agents Automatically Use Utilities&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PyOrchestrate.core.agents.base_agent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BaseAgent</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BaseAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, config):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # Utilities are automatically available</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # (managed by the framework)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.plugin_manager   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Manages agent plugins</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.message_channel  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Communication with orchestrator</span></span></code></pre></div><h3 id="orchestrator-managers-compose-utilities" tabindex="-1">Orchestrator Managers Compose Utilities <a class="header-anchor" href="#orchestrator-managers-compose-utilities" aria-label="Permalink to &quot;Orchestrator Managers Compose Utilities&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PyOrchestrate.core.orchestrator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Orchestrator</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Orchestrator()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># High-level managers use utilities internally</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator.event_bus          </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Uses EventManager + EventStore</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator.lifecycle_manager  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Uses PluginManager</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator.message_router     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Uses MessageChannel</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator.command_interface  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Uses MessageChannel</span></span></code></pre></div><h2 id="best-practices" tabindex="-1">Best Practices <a class="header-anchor" href="#best-practices" aria-label="Permalink to &quot;Best Practices&quot;">​</a></h2><h3 id="_1-use-high-level-apis-when-possible" tabindex="-1">1. Use High-Level APIs When Possible <a class="header-anchor" href="#_1-use-high-level-apis-when-possible" aria-label="Permalink to &quot;1. Use High-Level APIs When Possible&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ✅ Good: Use high-level API</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator.event_bus.register_callback(event, callback)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ❌ Avoid: Direct low-level access (unless necessary)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orchestrator.event_bus.event_manager.register_callback(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="_2-understand-the-abstraction-layers" tabindex="-1">2. Understand the Abstraction Layers <a class="header-anchor" href="#_2-understand-the-abstraction-layers" aria-label="Permalink to &quot;2. Understand the Abstraction Layers&quot;">​</a></h3>`,33)),(t(),n(l,null,{default:a(()=>[r(i,{id:"mermaid-243",class:"mermaid my-class",graph:"flowchart%20TD%0A%20%20%20%20A%5BUser%20Code%5D%20--%3E%20B%5BOrchestrator%20Managers%5D%0A%20%20%20%20B%20--%3E%20C%5BCore%20Utilities%5D%0A%20%20%20%20C%20--%3E%20D%5BFramework%20Primitives%5D%0A%20%20%20%20%0A%20%20%20%20style%20A%20fill%3A%23e8f5e9%0A%20%20%20%20style%20B%20fill%3A%23e1f5ff%0A%20%20%20%20style%20C%20fill%3A%23fff4e1%0A%20%20%20%20style%20D%20fill%3A%23fce4ec%0A"})]),fallback:a(()=>e[1]||(e[1]=[o(" Loading... ")])),_:1})),e[4]||(e[4]=s('<ul><li><strong>User Code</strong>: Your application logic (agents, orchestrators)</li><li><strong>Orchestrator Managers</strong>: High-level components (OrchestratorEventBus, MessageRouter, etc.)</li><li><strong>Core Utilities</strong>: Low-level building blocks (EventManager, MessageChannel, PluginManager)</li><li><strong>Framework Primitives</strong>: Python standard library and dependencies</li></ul><h3 id="_3-consult-advanced-documentation" tabindex="-1">3. Consult Advanced Documentation <a class="header-anchor" href="#_3-consult-advanced-documentation" aria-label="Permalink to &quot;3. Consult Advanced Documentation&quot;">​</a></h3><p>For understanding how these utilities are composed into higher-level functionality, see:</p><ul><li><a href="./../orchestrator-internals/">Orchestrator Internals</a> - How managers use utilities</li><li><a href="./../../learn/agents/">Agent Architecture</a> - How agents use utilities</li></ul><h2 id="learning-path" tabindex="-1">Learning Path <a class="header-anchor" href="#learning-path" aria-label="Permalink to &quot;Learning Path&quot;">​</a></h2><h3 id="for-application-developers" tabindex="-1">For Application Developers <a class="header-anchor" href="#for-application-developers" aria-label="Permalink to &quot;For Application Developers&quot;">​</a></h3><ol><li>Start with <strong><a href="./../../learn/introduction/">Introduction</a></strong> - Understand orchestrators and agents</li><li>Learn <strong><a href="./../../learn/introduction/orchestrator_api.html">Orchestrator API</a></strong> - High-level usage</li><li>Explore <strong>Examples</strong> - Practical patterns</li></ol><p>You typically won&#39;t need to interact with these utilities directly.</p><h3 id="for-framework-contributors" tabindex="-1">For Framework Contributors <a class="header-anchor" href="#for-framework-contributors" aria-label="Permalink to &quot;For Framework Contributors&quot;">​</a></h3><ol><li>Read <strong><a href="./../orchestrator-internals/">Orchestrator Internals</a></strong> - Understand manager architecture</li><li>Study <strong>Core Utilities</strong> (this section) - Low-level building blocks</li><li>Review source code - Implementation details</li></ol><h2 id="see-also" tabindex="-1">See Also <a class="header-anchor" href="#see-also" aria-label="Permalink to &quot;See Also&quot;">​</a></h2><ul><li><a href="./../orchestrator-internals/">Orchestrator Internals</a> - High-level manager architecture</li><li><a href="./../../learn/config_and_validation.html">Configuration and Validation</a> - Configuration management</li><li><a href="./../../advanced/">Advanced Architecture</a> - Deep architectural topics</li></ul>',12))])}const A=h(d,[["render",g]]);export{E as __pageData,A as default};
